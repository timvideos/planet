<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Tim Videos Planet - Developers news - Category: GSOC-2014-HDMI2USB / Tag: MJPEG</title>
    <link>http://planet.timvideos.us</link>
    <description>News from our best developers, all news aggregated by planet.</description>
    <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
    <item>
      <title>Debug Data</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/27/debug-data/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Things are not as easy as they seem to look. After plenty of debugging and testing on hardware I was finally able to get the debug code working. I haven't implemented the part which outputs size of encoded data because it is a 3 byte value and I didn't have the foresight to write a very generalised code. Other debug data are 1 byte.&lt;br /&gt;&lt;br /&gt;So this is what I get from the UART. By the way I am using the test image and encoding quality of 50%.&lt;br /&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Input Frame Rate: 60 Hz. This is what it is suppose to be.&lt;/li&gt;&lt;li&gt;Output Frame Rate: ranges from 15 to 21. So lets take the average value to be 18.&lt;/li&gt;&lt;li&gt;Time taken to write frame into DDR2 Ram: 16-17 ms. This is what I approximated&lt;/li&gt;&lt;li&gt;Time taken for encoder to compress: 23 ms Again I was close&lt;/li&gt;&lt;li&gt;No. of frames dropped: 2&lt;/li&gt;&lt;/ul&gt;So in a second is 60 frames. And for every frame read, 2 frames are dropped which means only 20 frames are being processed.&lt;br /&gt;&lt;br /&gt;Writing + processing time = 40 ms =&amp;gt; 25 fps. So I *guess* we are losing 10 milliseconds in sending the data. (will check this).&lt;br /&gt;&lt;br /&gt;So I guess we know what our bottleneck is : When image is written into ddr2, it is not processed and when image is processed, image is not written into ddr2.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 27 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/27/debug-data/</guid>
      <dc:date>2014-06-27T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/26/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;ul&gt;&lt;li&gt;Got the UART working: The uart of atlys without the vizzini driver enumerates as ttyACMx. Rohit was able to use it to send data but I was getting crap values. Turns out that you can only send data from fpga via this and not send data to fpga. My uart test code would echo back the byte sent and since fpga did not receive anything I got crap values. This wasted a good 2 hours of my life.&lt;/li&gt;&lt;li&gt;Shenki's UART driver is working: To install vizzini I have to first remove cdc-acm which I did not do and hence &amp;nbsp;it did not work initially. Then after reading carefully the README I was able to get it working. The uart enumerates as &amp;nbsp;ttyUSB0.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Tested my code: My code was working in part, did some correction. But yesterday &amp;nbsp;there was power cut even in the evening so couldn't do much work. So I will be travelling to my parent's place today and work from there till things become normal here.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Sorry I missed the deadline. Will complete it ASAP.&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/26/daily-snippet/</guid>
      <dc:date>2014-06-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/25/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/25/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-25T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/23/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;I think I have some idea on why frame rate is slow. In my previous blog I explained how the state machine of image buffer works. Basically, a frame is stored first and then read into encoder for compression. From simulation data, a 1024*768 frame takes approx 25 ms (@ 78Mhz) to compress a frame. But if the frame rate of the HDMI source is 60hz then the minimum time taken to write a frame into the DDR2 Ram is 1/60s ie 17ms (assuming it takes no time to transfer data into DDR2 RAM which ofcourse is not true). So it takes 42 ms to store and compress a frame which gives you a frame rate of 23 fps. There is no pipelining between frames.&lt;br /&gt;&lt;br /&gt;In simulation, the encoder is fed with new data if its buffer is not full. But in actual firmware, data needs to be accessed from DDR2 RAM which even though is small is not negligible. Also the raw image data is buffered before being written into RAM to prevent loss of data, so it takes far more than 17 ms to write the whole frame into RAM. So my guess is frame rate of DDR2 + encoder system is around 20 fps.&lt;br /&gt;&lt;br /&gt;Also, I ran test bench for different encoding qualities. Turns out that for 100% encoding quality, the compression ratio is around 5-6 whereas for 50% encoding quality, the compression ratio is as high as 20-25.&lt;br /&gt;&lt;br /&gt;So output size of a frame at high encoding quality:&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;1024*768*24/5/1024/1024=3.6 MB&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Now bandwidth of cypress fx2 is 40 MBps. So&amp;nbsp; fps in high quality case will be 40/3.6=11.11 fps. That's why changing the frequency did not change the frame rate(I guess).&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;In low quality case as the compression is high, fx2 bandwidth does not limit the frame rate but the firmware limits the frame rate. So the observed fps is around 18.5-19 which is close to the fps I am guessing using calculation. &lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Friends, Romans, Mentors and countrymen please comment.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Disclaimer: I have used a lot of handwaiving calculation. So if I have used too much liberty please comment on it. I will try and give rigorous&amp;nbsp; maths. &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 23 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/23/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;Today I planned to complete the simulation of HDMI2USB but it turns out that the calibration_done signal is not yet high( it has been 6 hours now). I tried changing the tb, using some advance options like Joelw suggested but nothing seems to work. So I am either doing something terribly wrong or it is supposed to take a lot of time. So finally I decided to use pen and paper and try understand the code. It took me a lot of time because VHDL by nature is concurrent&amp;nbsp; and I had not fully understood the working of Xilinx MCB but I guess I have done it correctly. Turns out that image buffer works fine. &lt;br /&gt;&lt;br /&gt;The DDR2 read and write state machines are pretty complex because in general memory controller are complex. From what I could comprehend, there are three state machine in image buffer of HDMI2USB, one read from the RAM, second writes into the RAM and the third which controls the read and write state machine.&lt;br /&gt;&lt;br /&gt;The third state machine looks something like this:&lt;br /&gt;1) Wait for start of frame&lt;br /&gt;2) If start of frame is detected, start writing the frame onto RAM until end of frame is detected (wr_img=1)&lt;br /&gt;3) Once end of frame is detected, send start command to JPEG encoder and wait for &quot;Jpeg is busy&quot; signal(wr_img=0)&lt;br /&gt;4) If &quot;Jpeg is busy&quot; detected, start reading from RAM till the entire frame has been read(rd_img=1)&lt;br /&gt;5) Wait for done signal from encoder.(rd_img=0)&lt;br /&gt;6) Go back to step (1)&lt;br /&gt;&lt;br /&gt;I don't think read and write can be pipelined as DDR2 Ram do not allow simultaneous read and write.&lt;br /&gt;&lt;br /&gt;Here the only optimisation I can see is that instead of waiting for done after completing reading of frame (step 4), the state machine can wait for start of next frame and start reading.&lt;br /&gt;&lt;br /&gt;To understand the read and the write state machine, I dug the data sheet of MIG.&lt;br /&gt;Read state machine looks something like this:&lt;br /&gt;&lt;br /&gt;1) RESET: Wait for calibration to be done.&lt;br /&gt;2) read_cmd: if rd_img=1. Put read command and address into the command fifo.&lt;br /&gt;3) Wait for read data fifo of RAM to fill up. (64 words)&lt;br /&gt;4) Once full, send the data into JPEG buffer if the Jpeg buffer is not full.&lt;br /&gt;5) If 64 words are read goto step (2)&lt;br /&gt;&lt;br /&gt;Write state machine:&lt;br /&gt;1) Wait for calibration&lt;br /&gt;2) If wr_img=1 and there is something to be written fill the write data fifo of RAM(64 words)&lt;br /&gt;3) Once full, push write command and address to command fifo&lt;br /&gt;4) Wait for write to complete.&lt;br /&gt;5) Once done goto 2&lt;br /&gt;&lt;br /&gt;The raw rgb data from image selector is first buffered using fifos and then sent to RAM. This helps prevent loss of data but adds to the latency.&lt;br /&gt;&lt;br /&gt;Everything seems to be legit. Only optimisation I can see is that instead of one read port, two can be used to pipline read cycles. So when one read data fifo is completely read and there is still space in the JPEG buffer, data from second read data fifo can be used. But since this is a DDR2 ram operating at 325 Mhz read time from RAM to fifo should not be great, so using two ports won't change much.&lt;br /&gt;&lt;br /&gt;Also, an inherent problem with the jpeg algorithm design is that 8 lines are required to start encoding. Since processing of frame is not pipelined as seen above and after processing of a frame the system resets, for a resolution of 1024x768, in every frame there is a stall of 1024*8 cycles. &lt;br /&gt;&lt;br /&gt;Tomorrow (I mean today) I will try to test the bandwidth of USB. &lt;a href=&quot;http://www.cypress.com/?id=4&amp;amp;rID=32888&quot;&gt;This article&lt;/a&gt; says maximum throughput is 40 MBps. So for 30 fps frame rate of 1024x768 resolution frames, the minimum bandwidth (assuming compression ratio of 10) should be (1024*768*24*30/10)/1024/1024 = 54MBps. Am I missing something?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I completed the coding part for the simulation of HDMI2USB. The main aim for this was to check whether the read and write pattern used in DDR2 Ram is optimum. For this I removed all the parts which did not affect the read and write performance of DDR2 Ram like EDID, USB etc. The&amp;nbsp; only problem is that the simulation takes up a lot of time. It takes upto 4 hrs for the calibration of DDR2 ram. I am currently simulating it. I will wake up and check the waveforms. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>I'm Back!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/i-m-back/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Finally I am back from my trip to US. The competition didn't go the way I wanted it to be. Our cansat did not send any telemetry. Also it landed in a sunflower field which meant we could not recover the cansat and the onboard memory which had all the telemetry data. But it was a good learning experience, plus I got a chance to meet people from all over the world which was great.&lt;br /&gt;I will resume working on the project. I will continue my work on simulating the HDMI2USB firmware. Hopefully, I will be able to come up with something fruitful by the end of this week. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/i-m-back/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Used Joelw's code on his blog to test the DDR2 ram. After initial hiccups I was finally able to do it. Also I underclocked the DDR2 Ram to check if there is a change in frame rate. When clock was reduced by half there was no change and when I reduced it further mplayer showed a timeout error.&lt;br /&gt;@shenki: I have added a new commit with the &lt;a href=&quot;https://github.com/ajitmathew/HDMI2USB/commit/78a97676ac6f9163bf5f5751f4597046b86c3e2b&quot;&gt;xsvf files&lt;/a&gt;. Try them on your board and please tell me the frame rate you observed. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;-Studied&amp;nbsp;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;ug416 and ug388 to understand XILINX MIG&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;-Studied working of DDR2 Ram&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;-Ran example design to understand the working further. Took me lot of time to get the clocks working at correct rate as PLL values were changed manually which I didn't take notice of.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-ffdcb646-6e8a-ffb5-4a66-414fe4bcad2e&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;321px;&quot; src=&quot;https://lh4.googleusercontent.com/Fja4sKaFLPqsgI8RyrgxmwIgF3leN6uPqmk7yRMkUAahP7vfDt6tQ8wevFSp6oDLEw-6uRu3ICsG-CejCpGG-Q2sNxwnaBD1a_xHAywrXMB6ZdxhAodTOiGevgo8bxiq0A&quot; style=&quot;-webkit-transform: rotate(0rad); border: none;&quot; width=&quot;512px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;The read FSM of DDR2 looks something like this^. So 1 burst read gives 64 bytes. Jpeg encoder needs 1280*8*3 bytes to start. That means it takes a lot of cycle to fill the jpeg. I will try &lt;/span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;under clocking&lt;/span&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt; the DDR2 ram today and see whether it affects the frame rate. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Also I will start coding the test bench.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/daily-snippet/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/05/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;As I am planning to write a test bench to simulate HDMI2USB, I spent most of the day trying to understand the TMSB protocol as I had not encountered it earlier. I was finally able to write a code which generates TMSB signal given RGB values.&lt;br /&gt;&lt;br /&gt;Work for Today: Understand the working of DDR2 ram and simulate it successfully. Then I will be ready for simulation of the whole.&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/05/daily-snippet/</guid>
      <dc:date>2014-06-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/04/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/04/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>UART Documentation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/uart-documentation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;span id=&quot;goog_2063204944&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;/a&gt;&lt;span id=&quot;goog_2063204945&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Atlys board has a UART-USB bridge which can be used for UART communication with other devices. UART is useful as a debug so I have made a simple UART.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Features:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Variable Data Bits: 7&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;, 8, or 9 data bits and 1 or 2 stop bits&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Parity &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;generation and checking: odd, even, or none.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;One transmit and one receive data buffer.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;4.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Received &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;data and status can optionally be read from a single &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;register&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;5.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Built-in Baud Rate Generator&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;6.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Variable &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Baudrates&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;. Use case: 19,200&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;7.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt; Data is received in frame.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;text-indent: -0.25in; text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-indent: -0.25in; text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Architecture&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;•&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;UART Transmitter&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;It&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;has 3 major components:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;FIFO &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Baudrate &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Generator&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Transmitter &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;interface &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;circuit&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;•&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;UART Receiver&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;It has 3 major components:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Baudrate Generato&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Receiver interface circuit&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;FIFO Buffer&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;Primary Inputs/Outputs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;•&lt;span style=&quot;font-variant: small-caps; font-weight: bold;&quot;&gt;Inputs&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;clk,reset&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;2.WIRE[7:0] W_DATA&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&amp;nbsp;- DATA INPUT TO TRANSMITTER FIFO&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;3.WIRE Wr_UART&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;- WHEN SET TO HIGH W_DATA IS WRITTEN INTO TRANSMITTER FIFO&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;4.WIRE Rx&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&amp;nbsp;- UART RECIEVER LINE&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;5.WIRE RD_UART&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;- READS &amp;nbsp;THE DATA FROMP FIFO&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;•&lt;span style=&quot;font-variant: small-caps; font-weight: bold;&quot;&gt;Outputs&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE TX_FULL- HIGH WHEN TX FIFO IS FULL&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE TX- UART TRANSMITTER LINE&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE RX_EMPTY- HIGH WHEN RX FIFO IS EMPTY&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;4.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE R_DATA- OUPUT FROM RX FIFO&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;FSM for Reciever&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/--a3sZ0tgq8k/U44huOZQpgI/AAAAAAAAAMw/cWfDMJSun0Q/s1600/FSM.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/--a3sZ0tgq8k/U44huOZQpgI/AAAAAAAAAMw/cWfDMJSun0Q/s1600/FSM.JPG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the communication is asynchronous, data is oversampled. Each bit is oversampled 16 times. Oversampling is done using a mod m counter.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the circuit is oversampling, I am running UART at 50 MHz which is generated using PLL.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;How To Use?&lt;/b&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Add UART files to your design file.&lt;/li&gt;&lt;li&gt;Add UART_clock.xco. You may have to regenerate the core depending on you design.&lt;/li&gt;&lt;li&gt;Set paramerters of UART_main.(The following are default parameters)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data_Bits=8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of data bits&lt;/li&gt;&lt;li&gt;StopBit_ticks = 16 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of ticks for stop bits. 16/24/32 for 1/1.5/2 bits&lt;/li&gt;&lt;li&gt;DIVSIOR = 326 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Use it to set baud rate. Divisor= 50/(16*BaudRate)&lt;/li&gt;&lt;li&gt;DVSR_BIT=9 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; // No. of bits of Divisor&lt;/li&gt;&lt;li&gt;FIFO_Add_Bit= 2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of address bits of FIFO&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;To transmit data, drive w_data and strobe the wr_uart signal.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data will not be written into fifo if tx_full is high&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;To dequeue data from receiver fifo, strobe the rd_uart signal.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data in receiver is invalid if rx_empty is high&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Add the following lines to your ucf file.&lt;/li&gt;&lt;li&gt;Download exar driver from&amp;nbsp;&lt;a href=&quot;http://www.exar.com/connectivity/uart-and-bridging-solutions/usb-uarts/xr21v1410&quot;&gt;here&lt;/a&gt;&lt;u&gt;&amp;nbsp;&lt;/u&gt;and install them.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;NOTE: Turns out that the linux drivers are outdated. Shenki has made changes to it which can be found &lt;a href=&quot;https://github.com/shenki/exar-uart-driver/commits?author=shenki&quot;&gt;here&lt;/a&gt;&amp;nbsp;but I was unable to get it running. I have test the code on windows.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Use hyperterminal or gtkterm to monitor/send data.&lt;/li&gt;&lt;li&gt;Enjoy!&lt;/li&gt;&amp;nbsp;&lt;/ul&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;You can get uart files from UART folder in this link: &lt;/ul&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;a href=&quot;https://github.com/ajitmathew/HDMI2USB.git&quot;&gt;https://github.com/ajitmathew/HDMI2USB.git&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/uart-documentation/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Weekend Review</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/weekend-review/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Work done in last week: &lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Investigated the effect of encoding quality.&lt;/li&gt;&lt;li&gt;Investigated the effect of post jpeg stages&lt;/li&gt;&lt;li&gt;Changed FSM of JPEG core&lt;/li&gt;&lt;li&gt;Underclocking of Jpeg core&lt;/li&gt;&lt;li&gt;Studied Chroma Subsampling&lt;/li&gt;&lt;li&gt;Wrote code of UART (alpha stage)&lt;/li&gt;&lt;/ul&gt;Work to be done this week:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Complete UART implementation with documentation on how to use it so that it can be used by other developers.(2-3 days)&lt;/li&gt;&lt;li&gt;&amp;nbsp;Then try one of these:&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Investigate performance of pre-jpeg blocks. &lt;/li&gt;&lt;li&gt;Write a test bench to simulate the HDMI2USB firmware.(Will take a week or two).&lt;/li&gt;&lt;li&gt;Implement chroma subsampling 4:2:0.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/weekend-review/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Wrote a code to test the UART on hardware&lt;/li&gt;&lt;li&gt;Wasted a lot of time trying to get the driver running. Shenki changed the source code to make it compatible with latest kernel but my terminal hangs when I install the drivers.&lt;/li&gt;&lt;li&gt;Finally tested the UART using Windows. Working!&lt;/li&gt;&lt;li&gt;Tested the code for different baud rates. Working for 19200.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Tomorrow:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Integrate the code with HDMI2USB and test it.&lt;/li&gt;&lt;li&gt;If things work, write documentation and give to HDMI2USB community to test. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/daily-snippet/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew edited the timvideos/HDMI2USB wiki</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/ajitmathew-edited-the-timvideos-hdmi2usb-wiki/</link>
      <description>&lt;!-- gollum --&gt;
&lt;span class=&quot;mega-octicon octicon-book&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/ajitmathew-edited-the-timvideos-hdmi2usb-wiki/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;Today&lt;br /&gt;[Code] UART done with Testbench&lt;br /&gt;&lt;br /&gt;Tomorrow:&lt;br /&gt;&lt;br /&gt;Test it on hardware&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/snippet/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>FSM Changed, FPS Did NOT!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/fsm-changed-fps-did-not/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;I changed the FSM which controls the JPEG encoder yesterday. I initially went in the wrong direction as I understood the OPB protocol incorrectly. When I finally understood the problem, the implementations was of few lines. Earlier quantisation tables were written every time a new frame was loaded. Now it will change only when encoding quality changes. So it saves 1024 clock cycles per frame if encoding quality does not change. It took me several attempts to get it working. But FPS didn't change. It will probably make a difference when the fps is very high, so the clock cycle saved per frame will be significant.&lt;br /&gt;&lt;br /&gt;Also, I tried underclocking. I changed the clock divider of jpeg clock(freq=625Mhz/clock divider) from 7 to 11. FPS did not change for 7,8,9. But I got timeout error for 10 and 11 which I guess means FPS was too low. I honestly don't know what to make out of this.&lt;br /&gt;&lt;br /&gt;Also there is a bug. I have no idea about the bug. Here is the video.&lt;br /&gt;&lt;a href=&quot;https://plus.google.com/u/0/photos?pids=6018834295339420658,6018443083338911458,6018415391324052546&amp;amp;oid=113939432707725205058&amp;amp;pid=6018834295339420658&quot;&gt;&amp;nbsp;bug video&lt;/a&gt;&lt;br /&gt;In the video, things worked after two attempts but it can take more. .&lt;br /&gt;&lt;br /&gt;Today I was supposed to start changes chroma subsampling of the encoder but I guess adding UART functionality would be better as it will help me and other developers to debug easily. So I will spend the day trying to get the UART working on the board.&lt;br /&gt;&lt;br /&gt;Snippet:&lt;br /&gt;Work done- Changed FSM, Played with underclocking, Studied chroma subsamling&lt;br /&gt;Work to be done today-&lt;br /&gt;- Implement UART on board&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/fsm-changed-fps-did-not/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-07-02T00:00:00+00:00</dc:date>
  </channel>
</rss>