<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Tim Videos Planet - Developers news - Category: GSOC-2014-HDMI2USB / Tag: MJPEG</title>
    <link>http://planet.timvideos.us</link>
    <description>News from our best developers, all news aggregated by planet.</description>
    <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Used Joelw's code on his blog to test the DDR2 ram. After initial hiccups I was finally able to do it. Also I underclocked the DDR2 Ram to check if there is a change in frame rate. When clock was reduced by half there was no change and when I reduced it further mplayer showed a timeout error.&lt;br /&gt;@shenki: I have added a new commit with the &lt;a href=&quot;https://github.com/ajitmathew/HDMI2USB/commit/78a97676ac6f9163bf5f5751f4597046b86c3e2b&quot;&gt;xsvf files&lt;/a&gt;. Try them on your board and please tell me the frame rate you observed. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;-Studied&amp;nbsp;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;ug416 and ug388 to understand XILINX MIG&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;-Studied working of DDR2 Ram&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; white-space: pre-wrap;&quot;&gt;-Ran example design to understand the working further. Took me lot of time to get the clocks working at correct rate as PLL values were changed manually which I didn't take notice of.&lt;/span&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-ffdcb646-6e8a-ffb5-4a66-414fe4bcad2e&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;321px;&quot; src=&quot;https://lh4.googleusercontent.com/Fja4sKaFLPqsgI8RyrgxmwIgF3leN6uPqmk7yRMkUAahP7vfDt6tQ8wevFSp6oDLEw-6uRu3ICsG-CejCpGG-Q2sNxwnaBD1a_xHAywrXMB6ZdxhAodTOiGevgo8bxiq0A&quot; style=&quot;-webkit-transform: rotate(0rad); border: none;&quot; width=&quot;512px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;The read FSM of DDR2 looks something like this^. So 1 burst read gives 64 bytes. Jpeg encoder needs 1280*8*3 bytes to start. That means it takes a lot of cycle to fill the jpeg. I will try &lt;/span&gt;&lt;span style=&quot;white-space: pre-wrap;&quot;&gt;under clocking&lt;/span&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt; the DDR2 ram today and see whether it affects the frame rate. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span&gt;&lt;span style=&quot;vertical-align: baseline;&quot;&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 15px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Also I will start coding the test bench.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/daily-snippet/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/06/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-06T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/05/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;As I am planning to write a test bench to simulate HDMI2USB, I spent most of the day trying to understand the TMSB protocol as I had not encountered it earlier. I was finally able to write a code which generates TMSB signal given RGB values.&lt;br /&gt;&lt;br /&gt;Work for Today: Understand the working of DDR2 ram and simulate it successfully. Then I will be ready for simulation of the whole.&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/05/daily-snippet/</guid>
      <dc:date>2014-06-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/04/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/04/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-06-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>UART Documentation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/uart-documentation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;span id=&quot;goog_2063204944&quot;&gt;&lt;/span&gt;&lt;a href=&quot;https://www.blogger.com/&quot;&gt;&lt;/a&gt;&lt;span id=&quot;goog_2063204945&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Atlys board has a UART-USB bridge which can be used for UART communication with other devices. UART is useful as a debug so I have made a simple UART.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Features:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Variable Data Bits: 7&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;, 8, or 9 data bits and 1 or 2 stop bits&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Parity &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;generation and checking: odd, even, or none.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;One transmit and one receive data buffer.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;4.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Received &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;data and status can optionally be read from a single &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;register&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;5.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Built-in Baud Rate Generator&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;6.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Variable &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;Baudrates&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt;. Use case: 19,200&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.25in;&quot;&gt;7.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.25in;&quot;&gt; Data is received in frame.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;text-indent: -0.25in; text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;text-indent: -0.25in; text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;Architecture&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;•&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;UART Transmitter&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;It&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;has 3 major components:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;FIFO &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Buffer&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Baudrate &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Generator&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Transmitter &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;interface &lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;circuit&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.23in;&quot;&gt;•&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;UART Receiver&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.23in;&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: 0in;&quot;&gt;It has 3 major components:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Baudrate Generato&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;Receiver interface circuit&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Georgia, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.56in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.56in;&quot;&gt;FIFO Buffer&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;text-transform: uppercase;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;Primary Inputs/Outputs&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;•&lt;span style=&quot;font-variant: small-caps; font-weight: bold;&quot;&gt;Inputs&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;clk,reset&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;2.WIRE[7:0] W_DATA&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&amp;nbsp;- DATA INPUT TO TRANSMITTER FIFO&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;3.WIRE Wr_UART&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;- WHEN SET TO HIGH W_DATA IS WRITTEN INTO TRANSMITTER FIFO&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;4.WIRE Rx&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&amp;nbsp;- UART RECIEVER LINE&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;text-indent: -0.38in;&quot;&gt;5.WIRE RD_UART&lt;/span&gt;&lt;span style=&quot;font-variant: small-caps; text-indent: -0.38in;&quot;&gt;- READS &amp;nbsp;THE DATA FROMP FIFO&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;•&lt;span style=&quot;font-variant: small-caps; font-weight: bold;&quot;&gt;Outputs&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE TX_FULL- HIGH WHEN TX FIFO IS FULL&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;2.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE TX- UART TRANSMITTER LINE&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;3.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE RX_EMPTY- HIGH WHEN RX FIFO IS EMPTY&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; text-indent: -0.38in;&quot;&gt;4.&lt;/span&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;WIRE R_DATA- OUPUT FROM RX FIFO&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -0.23in; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, 'Times New Roman', serif; font-variant: small-caps; text-indent: -0.38in;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;FSM for Reciever&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/--a3sZ0tgq8k/U44huOZQpgI/AAAAAAAAAMw/cWfDMJSun0Q/s1600/FSM.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/--a3sZ0tgq8k/U44huOZQpgI/AAAAAAAAAMw/cWfDMJSun0Q/s1600/FSM.JPG&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the communication is asynchronous, data is oversampled. Each bit is oversampled 16 times. Oversampling is done using a mod m counter.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the circuit is oversampling, I am running UART at 50 MHz which is generated using PLL.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;How To Use?&lt;/b&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;/div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Add UART files to your design file.&lt;/li&gt;&lt;li&gt;Add UART_clock.xco. You may have to regenerate the core depending on you design.&lt;/li&gt;&lt;li&gt;Set paramerters of UART_main.(The following are default parameters)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data_Bits=8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of data bits&lt;/li&gt;&lt;li&gt;StopBit_ticks = 16 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of ticks for stop bits. 16/24/32 for 1/1.5/2 bits&lt;/li&gt;&lt;li&gt;DIVSIOR = 326 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Use it to set baud rate. Divisor= 50/(16*BaudRate)&lt;/li&gt;&lt;li&gt;DVSR_BIT=9 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; // No. of bits of Divisor&lt;/li&gt;&lt;li&gt;FIFO_Add_Bit= 2 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// No. of address bits of FIFO&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;To transmit data, drive w_data and strobe the wr_uart signal.&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data will not be written into fifo if tx_full is high&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;To dequeue data from receiver fifo, strobe the rd_uart signal.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Data in receiver is invalid if rx_empty is high&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Add the following lines to your ucf file.&lt;/li&gt;&lt;li&gt;Download exar driver from&amp;nbsp;&lt;a href=&quot;http://www.exar.com/connectivity/uart-and-bridging-solutions/usb-uarts/xr21v1410&quot;&gt;here&lt;/a&gt;&lt;u&gt;&amp;nbsp;&lt;/u&gt;and install them.&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;NOTE: Turns out that the linux drivers are outdated. Shenki has made changes to it which can be found &lt;a href=&quot;https://github.com/shenki/exar-uart-driver/commits?author=shenki&quot;&gt;here&lt;/a&gt;&amp;nbsp;but I was unable to get it running. I have test the code on windows.&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Use hyperterminal or gtkterm to monitor/send data.&lt;/li&gt;&lt;li&gt;Enjoy!&lt;/li&gt;&amp;nbsp;&lt;/ul&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;You can get uart files from UART folder in this link: &lt;/ul&gt;&lt;div style=&quot;direction: ltr; margin-bottom: 4.5pt; margin-left: 0.23in; margin-top: 4.08pt; text-indent: -36.480003356933594px; unicode-bidi: embed; word-break: normal;&quot;&gt;&lt;span style=&quot;font-family: Times, Times New Roman, serif;&quot;&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;&lt;a href=&quot;https://github.com/ajitmathew/HDMI2USB.git&quot;&gt;https://github.com/ajitmathew/HDMI2USB.git&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/uart-documentation/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Weekend Review</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/weekend-review/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Work done in last week: &lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Investigated the effect of encoding quality.&lt;/li&gt;&lt;li&gt;Investigated the effect of post jpeg stages&lt;/li&gt;&lt;li&gt;Changed FSM of JPEG core&lt;/li&gt;&lt;li&gt;Underclocking of Jpeg core&lt;/li&gt;&lt;li&gt;Studied Chroma Subsampling&lt;/li&gt;&lt;li&gt;Wrote code of UART (alpha stage)&lt;/li&gt;&lt;/ul&gt;Work to be done this week:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Complete UART implementation with documentation on how to use it so that it can be used by other developers.(2-3 days)&lt;/li&gt;&lt;li&gt;&amp;nbsp;Then try one of these:&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Investigate performance of pre-jpeg blocks. &lt;/li&gt;&lt;li&gt;Write a test bench to simulate the HDMI2USB firmware.(Will take a week or two).&lt;/li&gt;&lt;li&gt;Implement chroma subsampling 4:2:0.&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/weekend-review/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Wrote a code to test the UART on hardware&lt;/li&gt;&lt;li&gt;Wasted a lot of time trying to get the driver running. Shenki changed the source code to make it compatible with latest kernel but my terminal hangs when I install the drivers.&lt;/li&gt;&lt;li&gt;Finally tested the UART using Windows. Working!&lt;/li&gt;&lt;li&gt;Tested the code for different baud rates. Working for 19200.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Tomorrow:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Integrate the code with HDMI2USB and test it.&lt;/li&gt;&lt;li&gt;If things work, write documentation and give to HDMI2USB community to test. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/daily-snippet/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew edited the timvideos/HDMI2USB wiki</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/ajitmathew-edited-the-timvideos-hdmi2usb-wiki/</link>
      <description>&lt;!-- gollum --&gt;
&lt;span class=&quot;mega-octicon octicon-book&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/02/ajitmathew-edited-the-timvideos-hdmi2usb-wiki/</guid>
      <dc:date>2014-06-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;Today&lt;br /&gt;[Code] UART done with Testbench&lt;br /&gt;&lt;br /&gt;Tomorrow:&lt;br /&gt;&lt;br /&gt;Test it on hardware&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/snippet/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>FSM Changed, FPS Did NOT!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/fsm-changed-fps-did-not/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;I changed the FSM which controls the JPEG encoder yesterday. I initially went in the wrong direction as I understood the OPB protocol incorrectly. When I finally understood the problem, the implementations was of few lines. Earlier quantisation tables were written every time a new frame was loaded. Now it will change only when encoding quality changes. So it saves 1024 clock cycles per frame if encoding quality does not change. It took me several attempts to get it working. But FPS didn't change. It will probably make a difference when the fps is very high, so the clock cycle saved per frame will be significant.&lt;br /&gt;&lt;br /&gt;Also, I tried underclocking. I changed the clock divider of jpeg clock(freq=625Mhz/clock divider) from 7 to 11. FPS did not change for 7,8,9. But I got timeout error for 10 and 11 which I guess means FPS was too low. I honestly don't know what to make out of this.&lt;br /&gt;&lt;br /&gt;Also there is a bug. I have no idea about the bug. Here is the video.&lt;br /&gt;&lt;a href=&quot;https://plus.google.com/u/0/photos?pids=6018834295339420658,6018443083338911458,6018415391324052546&amp;amp;oid=113939432707725205058&amp;amp;pid=6018834295339420658&quot;&gt;&amp;nbsp;bug video&lt;/a&gt;&lt;br /&gt;In the video, things worked after two attempts but it can take more. .&lt;br /&gt;&lt;br /&gt;Today I was supposed to start changes chroma subsampling of the encoder but I guess adding UART functionality would be better as it will help me and other developers to debug easily. So I will spend the day trying to get the UART working on the board.&lt;br /&gt;&lt;br /&gt;Snippet:&lt;br /&gt;Work done- Changed FSM, Played with underclocking, Studied chroma subsamling&lt;br /&gt;Work to be done today-&lt;br /&gt;- Implement UART on board&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/fsm-changed-fps-did-not/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Fri, 30 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/30/ajitmathew-pushed-to-gsoc-at-ajitmathew-hdmi2usb/</guid>
      <dc:date>2014-05-30T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Yesterday probably I worked the longest (10 hrs maybe). I was trying to check whether the reason for slow fps is blocks after jpeg core. To check this I removed the the signals which the usb controller gave to the jpeg core. Also I wrote a code which counts the done signal of the jpeg core and I output the range of the count using LEDs(like for count less than 10 LED0 would light up). And it turns out that count of the done signal was in same range as the output fps. I tried different combinations like different encoding quality, allowing some signals of usb controller to control the jpeg core while ignoring other and the result was more or less the same. Meanwhile the code threw a timing error which took me 2 hrs to debug.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;&amp;nbsp;Also I did some reading on quantisation tables for JPEG. Turns out that quantisation should be low for luminance table (quality-85%) and high for chrominance of around 50%. But this is a general rule and cannot be used for all applications. &lt;br /&gt;&lt;br /&gt;Today I plan to change the jpeg top module and see whether it improves fps. I have few ideas. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-05-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew pushed to master at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/ajitmathew-pushed-to-master-at-ajitmathew-hdmi2us/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/ajitmathew-pushed-to-master-at-ajitmathew-hdmi2us/</guid>
      <dc:date>2014-05-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>ajitmathew created branch gsoc at ajitmathew/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/ajitmathew-created-branch-gsoc-at-ajitmathew-hdmi/</link>
      <description>&lt;!-- create --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/29/ajitmathew-created-branch-gsoc-at-ajitmathew-hdmi/</guid>
      <dc:date>2014-05-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Finally the FPS changes!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/27/finally-the-fps-changes/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;In my previous post I mentioned how it appears that JPEG encoder is working at 100% encoding quality. Turns out it is true. I hardcoded to make the core run at 50% quality and 100% quality and there was a clear change in the fps. At 100%, the fps was same as the normal HDMI2USB frame rate. And at 50%, framerate jumps to around 20 fps.&lt;br /&gt;Now 100% quality encoding is not good.Why? In the quantisation step, a each sample of a 8x8 block is divided by a number which depends on encoding quality and frequency component the sample. Human eye is sensitive to low frequency so in quantisation process, low frequencies are preserved and high frequencies are suppressed. But when for 100% quality all components are preserved, so the output file is large but for the human eye it looks as good as say 75% quality.&lt;br /&gt;Plus at 100% quality, the clock cycles spent on quantisation are waste as we are basically dividing by 1.&amp;nbsp;&amp;nbsp; &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-S39lPx0Q5YY/U4RP2imZK2I/AAAAAAAAAKU/iDav1ApHoQI/s1600/high_quality.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-S39lPx0Q5YY/U4RP2imZK2I/AAAAAAAAAKU/iDav1ApHoQI/s1600/high_quality.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&amp;nbsp;(^100%-11.50 fps)&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-JjznbeucWh4/U4RP39zFugI/AAAAAAAAAKY/GgqgRaTvYkI/s1600/quantisation_50%25.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-JjznbeucWh4/U4RP39zFugI/AAAAAAAAAKY/GgqgRaTvYkI/s1600/quantisation_50%25.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;(^50%-19 fps)&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;I will look up some material on chrominance and luminance tables and see what is a good trade off between quality and frame rate.&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/27/finally-the-fps-changes/</guid>
      <dc:date>2014-05-27T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/26/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I tried to change the encoding quality manually. The reason for this is that if the jpeg core is running at 100% quality then the quantisation step of JPEG encoding is useless. For that I changed the code of JPEG top and used switched in board to select the encoding quality. Unfortunately after flashing the firmware, mplayer and guvcviewer could not play the HDMI input. Things are going slow because it takes around 15 mins in my system to generate the bitstream. I will try to get things working tomorrow too. If things don't work, I will reach out for help.&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/26/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-05-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>1 Week Down!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/26/1-week-down/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;In the past week I stuck to my goal of improving the fmax of MPEG coder. I tried to run at 105 Mhz(because clock dividers should be integer) but timing constraints failed. Tried a bunch of stuff but didn't succeed. Then I finally ran the MPEG&amp;nbsp; core at 90 MHz. All timing constraints were met but there was no improvement in the speed which was a bummer. Anyway during weekend I tried an optimisation but was not able to run it successfully on the hardware. The JPEG top module has the following FSM&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-4a60888b-3909-effc-cfe1-2b61062e4cfd&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;img height=&quot;435px;&quot; src=&quot;https://lh6.googleusercontent.com/sMdikks2vdnZoBay_x7ywnSkX5JFG_szu8TwvWCTkLc3W9dGYoE6Uk1q8EduEZjvbGNEG98syDIY3XKTAx5V_N7I13nsQyKFS6Lgi0MbxZngnkfNL5-qMsvUrYXlicLq6w&quot; style=&quot;border: medium none; transform: rotate(0rad);&quot; width=&quot;580px;&quot; /&gt;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;As you can see, after every frame compressed lumination and chrome tables are written again. Plus because of the OPB interface, there is atleast a cycle long wait for ack. So for every frame 512*2=1024 cycles are wasted when a frames is compressed. So I was trying to change the FSM so that the table writing step is bypassed if there is no command to change the encoding quality. Unfortunately my changes are not working on hardware. I am planning to spend some time on it. Also I plan to check the efficieny of HDMI2USB minus the cypress firmware so that I can test whether or not the cypress is slowing down HDMI2USB. Finally I am planning to start modifying the code for 4:2:0 sub sampling. This will take some time as I need to rewrite the FSM of JPEG core. This will probably take 2 weeks. Hope this week gives me some positive results.&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 26 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/26/1-week-down/</guid>
      <dc:date>2014-05-26T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/24/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;As it turns out, the JPEG encoder works at 78 MHz. As I didn't have a oscilloscope, I wrote a VHDL code too check the frequency of the PLL using LED. And yes, it turned out to be greater that 70 Mhz. So my theory that the core is running slow because the clock is slow turns out to be false. I did run smartexplorer to remove see if I can remove the timing faliure but it didn't. Further analysis revealed that I can safely ignore the path that was failing timing constraint as it was the PLL MUX selecting signal which was not important. I used a TIG in the UCF file to remove it. I changed PLL parameters to make the encoder run at 100 MHz, and strangely ISE did not throw any timing violation but things didn't work on hardware. I will try once again in the weekend. I use guvcviewer to check the frame rate of the video streaming and it comes out to be 12 fps on average. I will study other parts of HDMI2USB and try to find the bottleneck.&amp;nbsp; &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/24/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-05-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Clocking of HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/21/clocking-of-hdmi2usb/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I spent almost my whole day trying to understand the clocking of the HDMI2USB. Well it turned out to be a tedious deal because the firmware is in VHDL spanning arcoss multiple files and it has a memory interface which is generated using the MIG tool. THe MIG tool is very poorly documented. Thanks to a blog post by Joelw (http://www.joelw.id.au/FPGA/XilinxMIGTutorial) things got slightly easier. So basically, the oscillator output (100Mhz) is connected to the memory interface which has a PLL and this PLL generates 6 clocks. The first 2 clocks are used by MSB and the rest are for user fabric. The PLL parameter used in HDMI2SB is same as given in the blog. So except the image buffer which is the DDR2RAM, rest of the blocks of HDMI2usb run on 78.125 Mhz clock.&lt;br /&gt;But something that caught my attention was this line from the blog&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;pre class=&quot;escaped&quot; style=&quot;background-color: whitesmoke; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border: 1px solid rgba(0, 0, 0, 0.14902); color: #333333; font-family: Menlo, Monaco, 'Courier New', monospace; font-size: 12.025px; line-height: 18px; padding: 8.5px; white-space: pre-wrap; word-break: break-all; word-wrap: break-word;&quot;&gt;wire c3_clk0; // 32 MHz clock generated by PLL. Actually, this should be 78 MHz! Investigate this.&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;c3_clk0 is the clock driving rest of the HDMI2USB blocks. If it really working at 32 MHz then we actually know our problem.&lt;br /&gt;&lt;br /&gt;HDMI2USB is currently working at 15fps for 720p. The JPEG encoder in simulation works at 20fps for a clock of 100MHz and the image resolution being 1080p. So it should work at ~50fps for 720p images&amp;nbsp;@100Mhz. So if the JPEG encoder is made to run at 32Mhz clock, frame rate will be 16fps.&lt;br /&gt;So if the PLL output is actually 32Mhz as written by Joelw then we know what our problem is. If PLL output is 78 MHz then I can't say what the problem is. It might be that the problem is not with JPEG core but something else. Anyways I have pinged Joelw about this and waiting for his opinion. Tomorrow I will try investigating this. Let's see how it turns up.&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 21 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/21/clocking-of-hdmi2usb/</guid>
      <dc:date>2014-05-21T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-06-17T00:00:00+00:00</dc:date>
  </channel>
</rss>