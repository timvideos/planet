<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Tim Videos Planet - Developers news - Category: GSOC-2014-HDMI2USB / Tag: ETHERNET</title>
    <link>http://planet.timvideos.us</link>
    <description>News from our best developers, all news aggregated by planet.</description>
    <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
    <item>
      <title>Sending RTP packets via FPGA</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/07/sending-rtp-packets-via-fpga/</link>
      <description>Today, i generated montonically incrementing RGB values as part of the packetizer and send that to the MAC after adding all the headers like RTP, UDP, IP and Ethernet. The simulation worked just fine. After that it was time to do the Xilinx build flow to make the RTP go across the 1 Gbps network. It took more than an hour to get the build flow finish. And lo and behold, i was struck by &lt;a href=&quot;http://pastebin.com/6Q8Ph6Gu&quot;&gt;timing violations&lt;/a&gt;. Time to fix this by re-coding.&lt;br /&gt;&lt;br /&gt;Debug mode continues&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/07/sending-rtp-packets-via-fpga/</guid>
      <dc:date>2014-07-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Debugging continues</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/07/debugging-continues/</link>
      <description>All the timing violations are corrected. The build flow works great. But wireshark is not capturing anything. The whole day was dedicated to debugging why packets are not coming out of FPGA.&lt;br /&gt;This will continue until problem solved. I am going to upload the design and log files later so you may suggest.&lt;br /&gt;&lt;br /&gt;I am thinking of putting a testbench and check the simulation after each of the synthesis, translation, mapping and p&amp;amp;r phases.&lt;br /&gt;&lt;br /&gt;The other would be to use Chipscope.&lt;br /&gt;&lt;br /&gt;Debug mode continues.&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/07/debugging-continues/</guid>
      <dc:date>2014-07-07T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>UDP  working on Atlys</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/04/udp-working-on-atlys/</link>
      <description>Today was working on hardware (Atlys board) trying to get FPGA to send UDP packets to the PC.&lt;br /&gt;The first attempt failed as the PC didn't have the 1G Ethernet card. The 2nd attempt took a while as the cable drivers were not installed. Its a big pain to get drivers installed on linux (Ubuntu 13.04 in particular). Finally i got that done and now UDP packets are being captured by Wireshark on the PC. Here is the snapshot.&lt;br /&gt;&lt;br /&gt;FPGA IP address = 192.168.1.2 (It is acting as source of UDP)&lt;br /&gt;PC IP address &amp;nbsp; &amp;nbsp; &amp;nbsp;= 192.168.1.1 (It is acting as destination of UDP)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-C23R4JSa0o0/U7ZRi-8gJVI/AAAAAAAAAJk/nB6G6yf-37k/s1600/wireshark_capture_udp.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-C23R4JSa0o0/U7ZRi-8gJVI/AAAAAAAAAJk/nB6G6yf-37k/s1600/wireshark_capture_udp.jpg&quot; height=&quot;271&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Time to send RTP packets piggybacked on UDP!!&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/04/udp-working-on-atlys/</guid>
      <dc:date>2014-07-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP Integration</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/04/rtp-integration/</link>
      <description>Now that UDP is working on Atlys FGPA and i can send UDP packets from Atlys FGPA to PC, i am working on adding RTP on top of UDP. Since i already have the RTP packetizer that interfaces with MAC, the only thing that is left is replacing the input &lt;b&gt;simulation&lt;/b&gt; model to RTP packetizer (that provides it with pixels) with actual &lt;b&gt;synthesizable&lt;/b&gt; model. I have HDMI pixel data dumped in a file, which is being read by RTP packetizer to create RTP packets. But now, i need something like DDR2 or RAM that holds this data. This stackoverflow &lt;a href=&quot;http://stackoverflow.com/questions/4321067/is-readmem-synthesizable-in-verilog&quot;&gt;post&lt;/a&gt;&amp;nbsp;may be good enough as well. Let me try that and update the blog.&lt;br /&gt;&lt;br /&gt;Its 4th of July holiday in US. Time to take a break as my family is coming to visit me for the day. I will keep it going on the weekend.&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/04/rtp-integration/</guid>
      <dc:date>2014-07-04T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>HDMI correctly captured and on its way to MAC</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/03/hdmi-correctly-captured-and-on-its-way-to-mac/</link>
      <description>The synchronization issue is solved. The proper RGB values are being captured. RTP packetizer is already complete and today we can generate correct stimulus for the packetizer. The correct stimulus comes from &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/7a0324c7d7d0713d88de17331cfc2cf6cf19564e/rtl/?at=master&quot;&gt;VTC_Demo&lt;/a&gt;. Take a look &amp;nbsp;at the &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/7a0324c7d7d0713d88de17331cfc2cf6cf19564e/vtc_demo_rtl.log?at=master&quot;&gt;log file&lt;/a&gt;&amp;nbsp;and the waveform&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://i58.tinypic.com/i5b407.png&quot;&gt;http://i58.tinypic.com/i5b407.png&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Now we have all the data to send to the MAC to send it across. That will the next step which should be going significantly ahead by the end of the week.&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 03 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/03/hdmi-correctly-captured-and-on-its-way-to-mac/</guid>
      <dc:date>2014-07-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Fixing timing issue in capturing HDMI</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/02/fixing-timing-issue-in-capturing-hdmi/</link>
      <description>The HDMI traffic that is generated is not being properly captured. At the moment, this is being debugged. Simulation is an integral part of this project which is missing in its sister project. The goal is to send real traffic so that at the destination we know what we are receiving. Right now RGB values get out of synchronization. Synchronization is so important. I have the necessary blocks to send HDMI data as Ethernet frames but the goal is to send right HDMI values which are with respect HSYNC and VSYNC.&lt;br /&gt;&lt;br /&gt;Here is one snapshot which shows HCOUNT and VCOUNT not consistent with sys_clk.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://tinypic.com/view.php?pic=2wnte3d&amp;amp;s=8#.U7NwtB__6b5&quot;&gt;HDMI Frame 1st row of pixels&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;It will be debugged by tomorrow hopefully.&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit#heading=h.fnxxz0x6v3xd&quot;&gt;Spec&lt;/a&gt; will be updated tomorrow with what constitutes the right RGB values i.e., which RGB values need to be sent and which ones to be ignored.&lt;br /&gt;&lt;br /&gt;The immediate plan is&lt;br /&gt;&lt;br /&gt;1) to send the synchronized RGB as RTP packets via Ethernet and test it if they are being received correctly at the hardware level.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/02/fixing-timing-issue-in-capturing-hdmi/</guid>
      <dc:date>2014-07-02T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Adding HSYNC and VSYNC signals to the RTP packet interface</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/01/adding-hsync-and-vsync-signals-to-the-rtp-packet-/</link>
      <description>Before, we were streaming raw RGB values that were either randomly generated or monotonically increasing sequence. But as the purpose is to stream HDMI traffic, it makes sense to capture some real HDMI traffic and stream it through the packetizer. The last blog was an effort in this direction. We also have added HSYNC and VSYNC signals to the interface. See Figure 6 of the &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit#heading=h.fnxxz0x6v3xd&quot;&gt;Specification&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Now we can't just stream RGB values through the packetizer interface. Now we need to conform to HDMI protocol, which means we either assert HSYNC and VSYNC according to the protocol or somehow capture the traffic that already has this information. This is where the last blog comes into the picture. I was successfully able to generate HDMI traffic and dump it into a &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/8169c3c4191f934217619868d006bd51ff403828/hdmi/hdmi_capture.txt?at=master&quot;&gt;file&lt;/a&gt;. Packetizer then reads this file and sends the data downstream accordingly. The &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/8d8f95a4326e932c72bd070386d4d3fd9f534eb5/sim_models/rtl/?at=master&quot;&gt;files&lt;/a&gt; are here.&lt;br /&gt;&lt;br /&gt;More later!!!&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/07/01/adding-hsync-and-vsync-signals-to-the-rtp-packet-/</guid>
      <dc:date>2014-07-01T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Implementing XAPP 495 on Spartan 6</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/24/implementing-xapp-495-on-spartan-6/</link>
      <description>Today, i decided to do hardware testing and chose to implement the VTC reference design given in&amp;nbsp;http://bit.ly/1lluJn1 on Atlys board. I was able to implement the design successfully on Atlys board.&lt;br /&gt;&lt;br /&gt;Here are a few snapshots of the 720p frame&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-winAAxltkMQ/U6jsMWqA9NI/AAAAAAAAAIw/nj6F80P-O_4/s1600/hdmi_frame.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-winAAxltkMQ/U6jsMWqA9NI/AAAAAAAAAIw/nj6F80P-O_4/s1600/hdmi_frame.jpg&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-p20NqdI17kY/U6jsMy13mlI/AAAAAAAAAI0/2QVW8I8MSVA/s1600/hdmi_frame_another_view.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://3.bp.blogspot.com/-p20NqdI17kY/U6jsMy13mlI/AAAAAAAAAI0/2QVW8I8MSVA/s1600/hdmi_frame_another_view.jpg&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-bz4_EWZBqe4/U6jsJ9k2BvI/AAAAAAAAAIo/7YJY6AK1Q3o/s1600/hdmi_frame_resolution.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-bz4_EWZBqe4/U6jsJ9k2BvI/AAAAAAAAAIo/7YJY6AK1Q3o/s1600/hdmi_frame_resolution.jpg&quot; height=&quot;240&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Not only that, i was able to capture this HDMI traffic for the purpose of using it as RTP payload. I shall add the Verilog files that capture the HDMI to the bitbucket tomorrow. Here is a snapshot of the captured HDMI traffic going from FPGA to the monitor.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;720p resolution chosen&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;512: en=1,hsync=1,vsync=1,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;525: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;539: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;553: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;566: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;580: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;593: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;607: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;620: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;634: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;647: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;661: en=1,hsync=0,vsync=0,red= 0,green= 0,blue= 0&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;HSync and VSync signals shall also be added to the packetizer upstream interface.&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 24 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/24/implementing-xapp-495-on-spartan-6/</guid>
      <dc:date>2014-06-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Downstream interface of RTP Verilog core</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/downstream-interface-of-rtp-verilog-core/</link>
      <description>Today, i wanted to finish downstream interface of the RTP Verilog core. See &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit?pli=1&quot;&gt;Figure 6&lt;/a&gt;&amp;nbsp; of the Spec to see how the downstream interface looks like. The downstream block is the MAC (Media Access Controller). At the moment, the idea is to send RTP packets to the MAC. Once this is working, we can then insert UDP/IP/Ethernet headers and send it to the downstream interface as a realistic packet.&lt;br /&gt;&lt;br /&gt;I got the downstream interface working but it is lagging. What this means is that packet arrival is faster than packet departure. There are two ways to deal with this. One is to back-pressure the upstream interface until the packet is sent downstream. This means you cannot get new data from upstream interface until all the previous data has drained downstream. The other approach is to use a reasonably sized FIFO and let the arrived data fill up the FIFO. While new data arrives at the FIFO, downstream block consumes data from FIFO.&lt;br /&gt;&lt;br /&gt;Initially, i am going to try the first approach. Later, i can deal with the second approach.&lt;br /&gt;&lt;br /&gt;What i first encountered during synthesis was of course&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;&lt;b&gt;Synthesis Errors !!!!&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;ERROR:HDLCompiler:1401 - &quot;/home/user/gsoc14/python_code/myhdl_code/sim_models/rtp_xilinx/rtl/packetizer.v&quot; Line 148: Signal nxt_fifo_full in unit packetizer is connected to following multiple drivers:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;Driver 0: output signal nxt_fifo_full of instance Latch (nxt_fifo_full).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;Driver 1: output signal nxt_fifo_full of instance Multiplexer (fifo_full_fifo_full_MUX_20689).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;ERROR:HDLCompiler:1401 - &quot;/home/user/gsoc14/python_code/myhdl_code/sim_models/rtp_xilinx/rtl/packetizer.v&quot; Line 220: Signal nxt_send_buffer[10399] in unit packetizer is connected to following multiple drivers:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;&lt;br /&gt;&lt;/span&gt;So i had to rewrite RTL to make these Errors go away. I was able to do rewrite RTL as well as synthesize correctly. Here is the synthesis &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/packetizer.syr?at=master&quot;&gt;log file&lt;/a&gt;. Here is the synthesized &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/postsyn/?at=master&quot;&gt;netlist &lt;/a&gt;and &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/postsyn/tb_packetizer.v?at=master&quot;&gt;testbench&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Please run the &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/?at=master&quot;&gt;code&lt;/a&gt; and help me find bugs that you come across.&lt;br /&gt;&lt;br /&gt;Here is the output for a few clock cycles. The format is timestamp : 4bytes of RTP Data&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4356:80180000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4376:00000000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4416:00000501&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4436:001a0000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4456:00010000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4476:02000003&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4496:00000400&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4516:00050000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4536:06000007&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4556:00000800&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4576:00090000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4596:0a00000b&lt;br /&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I will do more testing next week.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/downstream-interface-of-rtp-verilog-core/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Testing and expansion of RTP Verilog model continues ...</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/testing-and-expansion-of-rtp-verilog-model-contin/</link>
      <description>The RTP Verilog RTL is complete and now it sends full 1280 pixel line (1280 x 3 bytes) as three packets of size 1281 bytes, 1281 bytes and 1278 bytes. See the &lt;b&gt;&lt;i&gt;revised&lt;/i&gt;&lt;/b&gt; &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit?pli=1&quot;&gt;Specification&lt;/a&gt;&amp;nbsp;(in particular page 2). The difference from yesterday is the amount of data and testing. Yesterday it was tested with toy data. Today it is tested with data that is close to real life i.e., full 1280 pixel lines&lt;br /&gt;&lt;br /&gt;The RTP Verilog RTL is uploaded to &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/6bb7705b9842/sim_models/?at=master&quot;&gt;bitbucket&lt;/a&gt;. The design has also gone through synthesis and post-synthesis simulation &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/6bb7705b9842597bbc7ccd78717d62b31f7a3e55/sim_models/rtp_xilinx/rtp/postsyn/?at=master&quot;&gt;Link&lt;/a&gt;. If you run post-synthesis simulation, you may not observe anything at the output. The reason is that pkt_data is no longer an output port. This is because&lt;br /&gt;&lt;br /&gt;1) It was added for observability and debugging purposes. It is not part of upstream or &amp;nbsp; &amp;nbsp; &amp;nbsp;downstream interfaces&lt;br /&gt;2) Its size is huge i.e., 1300 bytes i.e., reg [1300*8-1:0] pkt_data . Xilinx Spartan6 FPGA does not have these many pins to allocate.&lt;br /&gt;&lt;br /&gt;For above reasons, pkt_data is kept as an internal signal for synthesis. &lt;b&gt;But&lt;/b&gt; this is not the case in RTL, where pkt_data signal is available as an output port so you may see full pkt_data as shown below. I am showing one packet (i.e. first 1281 bytes of the first pixel line). 4136 is the time stamp in nanoseconds&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: purple;&quot;&gt;&amp;nbsp;4316: 8018000000000000000000000000&lt;/span&gt;&lt;span style=&quot;color: orange;&quot;&gt;0501&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;001a0&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;0000&lt;/span&gt;&lt;span style=&quot;color: purple;&quot;&gt;00000000100000200000300000400000500000600000700000800000900000a00000b00000c00000d00000e00000f00001000001100001200001300001400001500001600001700001800001900001a00001b00001c00001d00001e00001f00002000002100002200002300002400002500002600002700002800002900002a00002b00002c00002d00002e00002f00003000003100003200003300003400003500003600003700003800003900003a00003b00003c00003d00003e00003f00004000004100004200004300004400004500004600004700004800004900004a00004b00004c00004d00004e00004f00005000005100005200005300005400005500005600005700005800005900005a00005b00005c00005d00005e00005f00006000006100006200006300006400006500006600006700006800006900006a00006b00006c00006d00006e00006f00007000007100007200007300007400007500007600007700007800007900007a00007b00007c00007d00007e00007f00008000008100008200008300008400008500008600008700008800008900008a00008b00008c00008d00008e00008f00009000009100009200009300009400009500009600009700009800009900009a00009b00009c00009d00009e00009f0000a00000a10000a20000a30000a40000a50000a60000a70000a80000a90000aa0000ab0000ac0000ad0000ae0000af0000b00000b10000b20000b30000b40000b50000b60000b70000b80000b90000ba0000bb0000bc0000bd0000be0000bf0000c00000c10000c20000c30000c40000c50000c60000c70000c80000c90000ca0000cb0000cc0000cd0000ce0000cf0000d00000d10000d20000d30000d40000d50000d60000d70000d80000d90000da0000db0000dc0000dd0000de0000df0000e00000e10000e20000e30000e40000e50000e60000e70000e80000e90000ea0000eb0000ec0000ed0000ee0000ef0000f00000f10000f20000f30000f40000f50000f60000f70000f80000f90000fa0000fb0000fc0000fd0000fe0000ff00010000010100010200010300010400010500010600010700010800010900010a00010b00010c00010d00010e00010f00011000011100011200011300011400011500011600011700011800011900011a00011b00011c00011d00011e00011f00012000012100012200012300012400012500012600012700012800012900012a00012b00012c00012d00012e00012f00013000013100013200013300013400013500013600013700013800013900013a00013b00013c00013d00013e00013f00014000014100014200014300014400014500014600014700014800014900014a00014b00014c00014d00014e00014f00015000015100015200015300015400015500015600015700015800015900015a00015b00015c00015d00015e00015f00016000016100016200016300016400016500016600016700016800016900016a00016b00016c00016d00016e00016f00017000017100017200017300017400017500017600017700017800017900017a00017b00017c00017d00017e00017f00018000018100018200018300018400018500018600018700018800018900018a00018b00018c00018d00018e00018f00019000019100019200019300019400019500019600019700019800019900019a00019b00019c00019d00019e00019f0001a00001a10001a20001a30001a40001a50001a60001a70001a80001a900&lt;/span&gt;&lt;span style=&quot;color: #f1c232;&quot;&gt;01aa&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #f1c232;&quot;&gt;&lt;br /&gt;&lt;/span&gt;The last RGB value is 0x01aa which translates to 426. Since the payload started from 0, there are 427 pixel values (427x3 = 1281 bytes) have been packetized as RTP payload. I kept the RGB data as monotonically increasing integers starting from 0 to simplify testing and debugging. The design does not drop a single RGB data across packet boundaries. I have myself verified this. If you can find bugs in this code, please bring them to my attention by submitting a pull request or commenting below.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Time permitting, i will look at MyHDL stuff as Chris has put a lot of stuff. See yaa&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/testing-and-expansion-of-rtp-verilog-model-contin/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP Verilog Code and Synthesis</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/rtp-verilog-code-and-synthesis/</link>
      <description>Today was getting hands dirty writing Verilog code. The interface of the RTP core is shown in Figure 6 of&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;Specification&lt;/a&gt;. Note that RTP core will add UDP/IP and Ethernet Headers as well in the near future. The code correctly generates RTP packet i.e., header and payload (chosen to be small enough to debug).The design has also gone through synthesis Xilinx Synthesis flow and successfully post-synthesis simulation. The code is available on &lt;a href=&quot;http://bit.ly/1lYcoMJ&quot;&gt;bitbucket&lt;/a&gt;. The RTL file for RTP is &lt;a href=&quot;http://bit.ly/1quEJNJ&quot;&gt;packetizer.v&lt;/a&gt;, the testbench is &lt;a href=&quot;http://bit.ly/1invEnr&quot;&gt;tb_packetizer.v&lt;/a&gt;. The post-synthesis netlist is &lt;a href=&quot;http://bit.ly/1oJjDeJ&quot;&gt;packetizer_synthesis.v&lt;/a&gt;. You need Xilinx unisims, simprims, uni9000 and unimacro libraries to run the post-synthesis simulation.&lt;br /&gt;&lt;br /&gt;Here is a brief log of the RTL Run. If you have read the&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;Specification&lt;/a&gt;&amp;nbsp;(in particular pages 3-4), this should make sense&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0: 0000000000000000000000000000000000000000000000000000000000&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;145: 80180000000000000000000000000500001a0000000007000008000009&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;195: 80180001000000000000000000000500001a050000000a00000b00000c&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;245: 80180002000000000000000000000500001a0a0000000d00000e00000f&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;295: 80180003000000000000000000000500001b0000000010000011000012&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;345: 80180004000000000000000000000500001b0500000013000014000015&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;395: 80180005000000000000000000000500001b0a00000016000017000018&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;445: 80180006000000000000000000000500001c000000001900001a00001b&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;495: 80180007000000000000000000000500001c050000001c00001d00001e&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; Here is a snapshot of the RTL simulation&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-hVCyhNycw2Y/U6KSIWeceqI/AAAAAAAAAIQ/kksWosCoLvk/s1600/rtp_rtl_sim.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-hVCyhNycw2Y/U6KSIWeceqI/AAAAAAAAAIQ/kksWosCoLvk/s1600/rtp_rtl_sim.jpg&quot; height=&quot;166&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Here is a brief log of the post-synthesis simulation&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0: 0000000000000000000000000000000000000000000000000000000000&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;145: 80180000000000000000000000000500001a0000000007000008000009&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;195: 80180001000000000000000000000500001a050000000a00000b00000c&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;245: 80180002000000000000000000000500001a0a0000000d00000e00000f&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;295: 80180003000000000000000000000500001b0000000010000011000012&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;345: 80180004000000000000000000000500001b0500000013000014000015&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;395: 80180005000000000000000000000500001b0a00000016000017000018&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;445: 80180006000000000000000000000500001c000000001900001a00001b&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;495: 80180007000000000000000000000500001c050000001c00001d00001e&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;545: 80180008000000000000000000000500001c0a0000001f000020000021&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;595: 80180009000000000000000000000500001d0000000022000023000024&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here is a snapshot of the post-synthesis simulation&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-YGeEBwTp1wE/U6KS04NwoCI/AAAAAAAAAIY/31BLIFfAg4k/s1600/rtp_postsynl_sim.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-YGeEBwTp1wE/U6KS04NwoCI/AAAAAAAAAIY/31BLIFfAg4k/s1600/rtp_postsynl_sim.jpg&quot; height=&quot;135&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The Synthesis summary report is &lt;a href=&quot;http://bit.ly/1nRfjqe&quot;&gt;packetizer.syr&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the code is uploaded to&amp;nbsp;&lt;a href=&quot;http://bit.ly/1lYcoMJ&quot;&gt;bitbucket&lt;/a&gt;&lt;b&gt;, &lt;/b&gt;please help test it. Thanks in advance&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/rtp-verilog-code-and-synthesis/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Documentation and Looking at UDP core</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/18/documentation-and-looking-at-udp-core/</link>
      <description>Part of good working habit is to document every thing. I have seen it and i believe it is extremely useful. So read the &lt;a href=&quot;http://bit.ly/1l1Id7e&quot;&gt;Spec&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;As i am done with RTP golden model, i am about to write RTP Verilog model. I was figuring out myself as well as with my mentor what would the interface to UDP core look like.There are two possibilities&lt;br /&gt;&lt;br /&gt;1)Assume there is downstream UDP core to begin with that accepts data.In this case, interface is easy as you can see how UDP accepts data.&lt;br /&gt;&lt;br /&gt;2) If no UDP core or UDP core does not have interface to accept data, then you can add UDP header on the same spot where you are inserting RTP header. Not only that, you can also insert IP header as well. That means now you have to interface RTP with the MAC core.&lt;br /&gt;&lt;br /&gt;The two cores i looked at are&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.joelw.id.au/FPGA/DigilentAtlysResources&quot;&gt;http://www.joelw.id.au/FPGA/DigilentAtlysResources&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This falls in the 2nd category&lt;br /&gt;&lt;br /&gt;and&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://opencores.org/project,udp_ip_stack&quot;&gt;http://opencores.org/project,udp_ip_stack&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;which is sadly down throughout today and i could n't figure out if it belongs to 1st of 2nd category. I will try again tomorrow.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/18/documentation-and-looking-at-udp-core/</guid>
      <dc:date>2014-06-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 forked EttusResearch/uhd to tariq786/uhd</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/tariq786-forked-ettusresearch-uhd-to-tariq786-uhd/</link>
      <description>&lt;!-- fork --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/tariq786-forked-ettusresearch-uhd-to-tariq786-uhd/</guid>
      <dc:date>2014-06-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 forked CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers to tariq786/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/tariq786-forked-camdavidsonpilon-probabilistic-pr/</link>
      <description>&lt;!-- fork --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/tariq786-forked-camdavidsonpilon-probabilistic-pr/</guid>
      <dc:date>2014-06-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP packetizer golden model</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/rtp-packetizer-golden-model/</link>
      <description>A working RTP packetizer has been developed to deal with &lt;a href=&quot;http://tools.ietf.org/html/rfc4175&quot;&gt;uncompressed RTP payload&lt;/a&gt;. It is working after some basic testing. Here is the &lt;a href=&quot;http://bit.ly/1nLRZds&quot;&gt;code&lt;/a&gt;.You need modified rtp.py which is also included in the code. Tomorrow i shall add the documentation to tell you how i did all this and why i did it that way?&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/17/rtp-packetizer-golden-model/</guid>
      <dc:date>2014-06-17T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Unofficially on vacations</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/unofficially-on-vacations/</link>
      <description>I am on vacations but working on GSoC as well and as much as possible. This means i am not on vacations&lt;br /&gt;:(&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/unofficially-on-vacations/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP packet creation in Python from raw video stream</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/rtp-packet-creation-in-python-from-raw-video-stre/</link>
      <description>OK finally got the basic RTP packet creation done in Python using &lt;a href=&quot;http://www.myhdl.org/&quot;&gt;MyHDL &lt;/a&gt;and &lt;a href=&quot;https://code.google.com/p/dpkt/&quot;&gt;Dpkt&lt;/a&gt;&amp;nbsp;libraries&lt;br /&gt;Please look at the &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/434d5bc39f9202fd10fd5c5c080975da51b28701/sim_models/verification.py?at=master&quot;&gt;source code&lt;/a&gt; here. Note that you need to have MyHDL and Dpkt libraries installed to get this code to run.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-NcrpEI867kM/U41UlkgumBI/AAAAAAAAAHs/uYXvOVrCeck/s1600/write_image_buffer_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-NcrpEI867kM/U41UlkgumBI/AAAAAAAAAHs/uYXvOVrCeck/s1600/write_image_buffer_waveform.jpg&quot; height=&quot;60&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 1: Write into Image Buffer by raw HDMI stream&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-qEmkmVM2-MI/U41Uxlq80-I/AAAAAAAAAH0/AFs83KLs-Dc/s1600/read_image_buffer_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-qEmkmVM2-MI/U41Uxlq80-I/AAAAAAAAAH0/AFs83KLs-Dc/s1600/read_image_buffer_waveform.jpg&quot; height=&quot;61&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 2: Read from Image Buffer by RTP block&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here is the RTP packet of length 1086 bytes. Only the RTP payload is shown.&lt;br /&gt;&lt;br /&gt;raw_byteslt;br /&gt;byte_cnt= 1086&lt;br /&gt;raw_cnt = 362&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;RTP header is not shown. It can be printed by calling pack_hdr( ) function on RTP object. Other functions that can be called on RTP object are&lt;br /&gt;&lt;br /&gt;cc &lt;br /&gt;csrc &lt;br /&gt;data &lt;br /&gt;m &lt;br /&gt;p &lt;br /&gt;pack &lt;br /&gt;pack_hdr &lt;br /&gt;pt &lt;br /&gt;seq &lt;br /&gt;ssrc &lt;br /&gt;ts &lt;br /&gt;unpack &lt;br /&gt;version &lt;br /&gt;x &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;This Python implementation of RTP will be used to test actual RTL implementation of RTP as shown below&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-b94002cf-6023-20a5-6b2c-e6d62eeef7df&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;220px;&quot; src=&quot;https://docs.google.com/drawings/d/sK8_LPYz7_UD1PDmvsPomvg/image?w=554&amp;amp;h=220&amp;amp;rev=131&amp;amp;ac=1&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;554px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 3: Use of RTP Python Model to Verify RTP Verilog RTL&lt;/div&gt;&lt;br /&gt;Well i thought i am on vacations but not officially i guess !!!!!&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/rtp-packet-creation-in-python-from-raw-video-stre/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Out of town on Half Wednesday and Full Thursday</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/out-of-town-on-half-wednesday-and-full-thursday/</link>
      <description>Necessity is the mother of travel&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/out-of-town-on-half-wednesday-and-full-thursday/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Beating the Interfaces</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/beating-the-interfaces/</link>
      <description>I read and heard a lot about interface incompatibilities and how different understanding of an interface could cause misunderstanding between teams working together. I ran into the same issue. To fix this, and understand the top level interfaces of HDMI2USB, i ran FPGA synthesis on it so i can view the RTL schematic. Here is a snapshot of schematic successful synthesis.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-I7yVkRbUtRA/U4oRvQYCdDI/AAAAAAAAAHM/5czi06SuU6U/s1600/top_level_HDMI2USB.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-I7yVkRbUtRA/U4oRvQYCdDI/AAAAAAAAAHM/5czi06SuU6U/s1600/top_level_HDMI2USB.jpg&quot; height=&quot;320&quot; width=&quot;318&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 1: HDMI2USB at the top level&lt;/div&gt;&lt;br /&gt;Once you have this schematic, you can click on wires and blocks to see which is connected with which.&lt;br /&gt;&lt;br /&gt;My goal was to determine the interface of &lt;a href=&quot;https://bitbucket.org/tariq786/hdmi2usb/src/eaee2d1466ce118b5fe907b21b26352afb1c2e87/hdl/misc/image_buffer.vhd?at=master&quot;&gt;Image Buffer&lt;/a&gt;&amp;nbsp;to RTP Packetizer (it is still under development). After spending sometime and bouncing back and forth with mentor, i was able to understand it. The interface looks like following&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-b94002cf-5359-be3d-6405-44897b12cc47&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;148px;&quot; src=&quot;https://docs.google.com/drawings/d/sljplwrNdUM7m3VJ2c2h29g/image?w=595&amp;amp;h=148&amp;amp;rev=612&amp;amp;ac=1&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;595px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 2 : RTP Interface with upstream Image Buffer (Red arrow shows Flow Control signals)&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Here is a text and graphical snapshot of the simulation of the Image Buffer. The text shows 4 writes into the FIFO using Bus in (while reads are blocked on Bus out) and then the 4 writes are read &amp;nbsp;on Bus out while blocking writes on Bus in.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;#Simulation time [w=write operation] --&amp;gt; write address , &amp;nbsp;read address | input: enable status, fifo_full status bytes value , output: enable status, fifo_full status read value&lt;br /&gt;#Simulation time [r=read operation] --&amp;gt; read address , &amp;nbsp;write address | input: enable status, fifo_full status bytes value , output: enable status, fifo_full status read value&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;33: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 0, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 DE99C9, o:e0 f1 000000&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;39: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 1, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 E95B32, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;45: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 2, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 0D2F9F, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;51: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 3, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 6B6951, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;57: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 4, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 549BB1, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;63: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 0, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 000000&lt;/div&gt;&lt;div&gt;69: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 1, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 DE99C9&lt;/div&gt;&lt;div&gt;75: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 2, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 E95B32&lt;/div&gt;&lt;div&gt;81: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 3, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 0D2F9F&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If the above looks gibberish to you, you can look at the waveform below or read the &lt;a href=&quot;http://bit.ly/1nPSHqQ&quot;&gt;source code&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-5uKO8FyjEig/U4oU9pLH5sI/AAAAAAAAAHU/5Wmy2WJ8iWE/s1600/fifo_write_then_read_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-5uKO8FyjEig/U4oU9pLH5sI/AAAAAAAAAHU/5Wmy2WJ8iWE/s1600/fifo_write_then_read_waveform.jpg&quot; height=&quot;78&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 3: Waveform of FIFO WRITE and then READ operations&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Also added basic RTP packet processing functionality in the&amp;nbsp;&lt;a href=&quot;http://bit.ly/1nPSHqQ&quot;&gt;source code&lt;/a&gt;&amp;nbsp;to receive raw data from Image Buffer and turn it into RTP packets.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/beating-the-interfaces/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Back in town and getting back to work</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/back-in-town-and-getting-back-to-work/</link>
      <description>I worked half a day on Wednesday and was out of town on Thursday. On Friday, i was home the whole day as i was not feeling well. You can ask so what?&lt;br /&gt;&lt;br /&gt;Now the plan is to work on the weekend to complete the 40 hours as well as next week during which i am suppose to be on vacation.&lt;br /&gt;&lt;br /&gt;I had taken GSoC on my nerves. That is why my sleep and work cycle got unbalanced this week. I want to unwind myself and today (Friday) i focused on that. My goal is to complete the project and enjoy the experience rather than hosed.&lt;br /&gt;&lt;br /&gt;Anyway, got MyHDL 0.9-dev working. Now i can pass interfaces. I was able to run the code passed to me by Chris. The code treats Image buffer FIFO as shown in Figure 2 of the Spec&lt;br /&gt;&lt;br /&gt;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit&lt;br /&gt;&lt;br /&gt;&lt;strike&gt;While, i am more inclined to use Figure 3. I have to resolve this with the mentor.&lt;/strike&gt;&lt;br /&gt;&lt;br /&gt;Tomorrow (Saturday May 31st), integration of simulation models of Image Buffer -&amp;gt; RTP -&amp;gt; UDP in MyHDL will be dealt with.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/back-in-town-and-getting-back-to-work/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-07-07T00:00:00+00:00</dc:date>
  </channel>
</rss>