<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Tim Videos Planet - Developers news - Tag: NEWS</title>
    <link>http://planet.timvideos.us</link>
    <description>News from our best developers, all news aggregated by planet.</description>
    <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
    <item>
      <title>Porting Overlay Convertor</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/21/porting-overlay-convertor/</link>
      <description>&lt;p&gt;I started with porting the Overlay Convertor element which is used to add any text or logo over a video feed. This required a lot of work as I had to port Pango and PangoCairo to the new PyGI. I did the changes and tried to create a stream which resulted in these errors:&lt;/p&gt;

</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/21/porting-overlay-convertor/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>GSoC Update 6-20</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/21/gsoc-update-6-20/</link>
      <description>&lt;h2&gt;snippets&lt;/h2&gt;

</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/21/gsoc-update-6-20/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>[GSoC Snippet] 20/06/2014 and 21/06/2014</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/21/gsoc-snippet-20-06-2014-and-21-06-2014/</link>
      <description>&lt;b&gt;[code]&lt;/b&gt; changed design to serve better edit interface, now Prose.io conntected to current solution allows user to see realistic preview of written page.&lt;br /&gt;&lt;b&gt;[code]&lt;/b&gt; removed Prose from Getting Started Jekyll output and serve it as a separate project with gh-pages branch.&lt;br /&gt;&lt;b&gt;[code]&lt;/b&gt; add people page on &lt;a href=&quot;http://planet.timvideos.us/&quot;&gt;planet.timvideos.us&lt;/a&gt; with People related to TimVideos community, in file people.html you only need to add a user to users list in metadata, and some information you want to override or add for user.&lt;br /&gt;&lt;br /&gt;Users schema:&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-image: URL(http://2.bp.blogspot.com/_z5ltvMQPaa8/SjJXr_U2YBI/AAAAAAAAAAM/46OqEP32CJ8/s320/codebg.gif); background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; font-family: arial; font-size: 12px; height: auto; line-height: 20px; overflow: auto; padding: 0px; text-align: left; width: 99%;&quot;&gt;&lt;code style=&quot;color: black; word-wrap: normal;&quot;&gt; users:  &lt;br /&gt;  username:  &lt;br /&gt;   name: name of user (Name Surname)  &lt;br /&gt;   github: true or false (set true if you want to download information from github)  &lt;br /&gt;   description: short description about the user  &lt;br /&gt;   projects: list of projects where user contribute in TimVideos community  &lt;br /&gt;   avatar_url: full url for avatar  &lt;br /&gt;   profile_url: full url for profile (if something else than GitHub)  &lt;br /&gt;   blog: full url for user's blog  &lt;br /&gt;   location: user's location  &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://pinoit.blogspot.com&quot;&gt;pino IT / ruby / developer&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/21/gsoc-snippet-20-06-2014-and-21-06-2014/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Downstream interface of RTP Verilog core</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/downstream-interface-of-rtp-verilog-core/</link>
      <description>Today, i wanted to finish downstream interface of the RTP Verilog core. See &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit?pli=1&quot;&gt;Figure 6&lt;/a&gt;&amp;nbsp; of the Spec to see how the downstream interface looks like. The downstream block is the MAC (Media Access Controller). At the moment, the idea is to send RTP packets to the MAC. Once this is working, we can then insert UDP/IP/Ethernet headers and send it to the downstream interface as a realistic packet.&lt;br /&gt;&lt;br /&gt;I got the downstream interface working but it is lagging. What this means is that packet arrival is faster than packet departure. There are two ways to deal with this. One is to back-pressure the upstream interface until the packet is sent downstream. This means you cannot get new data from upstream interface until all the previous data has drained downstream. The other approach is to use a reasonably sized FIFO and let the arrived data fill up the FIFO. While new data arrives at the FIFO, downstream block consumes data from FIFO.&lt;br /&gt;&lt;br /&gt;Initially, i am going to try the first approach. Later, i can deal with the second approach.&lt;br /&gt;&lt;br /&gt;What i first encountered during synthesis was of course&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;&lt;b&gt;Synthesis Errors !!!!&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;ERROR:HDLCompiler:1401 - &quot;/home/user/gsoc14/python_code/myhdl_code/sim_models/rtp_xilinx/rtl/packetizer.v&quot; Line 148: Signal nxt_fifo_full in unit packetizer is connected to following multiple drivers:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;Driver 0: output signal nxt_fifo_full of instance Latch (nxt_fifo_full).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;Driver 1: output signal nxt_fifo_full of instance Multiplexer (fifo_full_fifo_full_MUX_20689).&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;ERROR:HDLCompiler:1401 - &quot;/home/user/gsoc14/python_code/myhdl_code/sim_models/rtp_xilinx/rtl/packetizer.v&quot; Line 220: Signal nxt_send_buffer[10399] in unit packetizer is connected to following multiple drivers:&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: red;&quot;&gt;&lt;br /&gt;&lt;/span&gt;So i had to rewrite RTL to make these Errors go away. I was able to do rewrite RTL as well as synthesize correctly. Here is the synthesis &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/packetizer.syr?at=master&quot;&gt;log file&lt;/a&gt;. Here is the synthesized &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/postsyn/?at=master&quot;&gt;netlist &lt;/a&gt;and &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/rtp_xilinx/postsyn/tb_packetizer.v?at=master&quot;&gt;testbench&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Please run the &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/46fade6c2eb1e1fae6b3a57097a9658d83c3617d/sim_models/?at=master&quot;&gt;code&lt;/a&gt; and help me find bugs that you come across.&lt;br /&gt;&lt;br /&gt;Here is the output for a few clock cycles. The format is timestamp : 4bytes of RTP Data&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4356:80180000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4376:00000000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4416:00000501&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4436:001a0000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4456:00010000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4476:02000003&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4496:00000400&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4516:00050000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4536:06000007&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4556:00000800&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4576:00090000&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 4596:0a00000b&lt;br /&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I will do more testing next week.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/downstream-interface-of-rtp-verilog-core/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily snippets</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/daily-snippets/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Completed connector placement drawings for daughterboards and listed them on the&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1lOAKj-r80o0KVlB-AP-42tiUY0Hg50EkQTgRwYNMilk/edit#gid=1547873779&quot; target=&quot;_blank&quot;&gt; mechanical design spreadsheet&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Completed &lt;a href=&quot;https://docs.google.com/drawings/d/1_AqSdjddKz_ljB_rFfbk5SCPRbmmGxUEGUEAXW8PphE/edit&quot; target=&quot;_blank&quot;&gt;support pins and header pins placement drawing&lt;/a&gt; for daughterboards.&lt;/li&gt;&lt;li&gt;Figured out dependency of daughterboard connector placements on chassis parameters and made a side-view diagram on&amp;nbsp;the spreadsheet to document them.&lt;/li&gt;&lt;li&gt;Did motherboard layout on the mechanical design spreadsheet to figure out chassis requirements.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ptzfortimvideos-gsoc14.blogspot.com/&quot;&gt;Serial port expansion for HDMI2USB with PTZ camera control example&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/daily-snippets/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Completed connector placement drawings for daughterboards and listed them on the&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1lOAKj-r80o0KVlB-AP-42tiUY0Hg50EkQTgRwYNMilk/edit#gid=1547873779&quot; target=&quot;_blank&quot;&gt; mechanical design spreadsheet&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Completed &lt;a href=&quot;https://docs.google.com/drawings/d/1_AqSdjddKz_ljB_rFfbk5SCPRbmmGxUEGUEAXW8PphE/edit&quot; target=&quot;_blank&quot;&gt;support pins and header pins placement drawing&lt;/a&gt; for daughterboards.&lt;/li&gt;&lt;li&gt;Figured out dependency of daughterboard connector placements on chassis parameters and made a side-view diagram on&amp;nbsp;the spreadsheet to document them.&lt;/li&gt;&lt;li&gt;Did motherboard layout on the mechanical design spreadsheet to figure out chassis requirements.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ptzfortimvideos-gsoc14.blogspot.com/&quot;&gt;Serial port expansion for HDMI2USB with PTZ camera control example&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/21/daily-snippet/</guid>
      <dc:date>2014-06-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&amp;nbsp;Today I planned to complete the simulation of HDMI2USB but it turns out that the calibration_done signal is not yet high( it has been 6 hours now). I tried changing the tb, using some advance options like Joelw suggested but nothing seems to work. So I am either doing something terribly wrong or it is supposed to take a lot of time. So finally I decided to use pen and paper and try understand the code. It took me a lot of time because VHDL by nature is concurrent&amp;nbsp; and I had not fully understood the working of Xilinx MCB but I guess I have done it correctly. Turns out that image buffer works fine. &lt;br /&gt;&lt;br /&gt;The DDR2 read and write state machines are pretty complex because in general memory controller are complex. From what I could comprehend, there are three state machine in image buffer of HDMI2USB, one read from the RAM, second writes into the RAM and the third which controls the read and write state machine.&lt;br /&gt;&lt;br /&gt;The third state machine looks something like this:&lt;br /&gt;1) Wait for start of frame&lt;br /&gt;2) If start of frame is detected, start writing the frame onto RAM until end of frame is detected (wr_img=1)&lt;br /&gt;3) Once end of frame is detected, send start command to JPEG encoder and wait for &quot;Jpeg is busy&quot; signal(wr_img=0)&lt;br /&gt;4) If &quot;Jpeg is busy&quot; detected, start reading from RAM till the entire frame has been read(rd_img=1)&lt;br /&gt;5) Wait for done signal from encoder.(rd_img=0)&lt;br /&gt;6) Go back to step (1)&lt;br /&gt;&lt;br /&gt;I don't think read and write can be pipelined as DDR2 Ram do not allow simultaneous read and write.&lt;br /&gt;&lt;br /&gt;Here the only optimisation I can see is that instead of waiting for done after completing reading of frame (step 4), the state machine can wait for start of next frame and start reading.&lt;br /&gt;&lt;br /&gt;To understand the read and the write state machine, I dug the data sheet of MIG.&lt;br /&gt;Read state machine looks something like this:&lt;br /&gt;&lt;br /&gt;1) RESET: Wait for calibration to be done.&lt;br /&gt;2) read_cmd: if rd_img=1. Put read command and address into the command fifo.&lt;br /&gt;3) Wait for read data fifo of RAM to fill up. (64 words)&lt;br /&gt;4) Once full, send the data into JPEG buffer if the Jpeg buffer is not full.&lt;br /&gt;5) If 64 words are read goto step (2)&lt;br /&gt;&lt;br /&gt;Write state machine:&lt;br /&gt;1) Wait for calibration&lt;br /&gt;2) If wr_img=1 and there is something to be written fill the write data fifo of RAM(64 words)&lt;br /&gt;3) Once full, push write command and address to command fifo&lt;br /&gt;4) Wait for write to complete.&lt;br /&gt;5) Once done goto 2&lt;br /&gt;&lt;br /&gt;The raw rgb data from image selector is first buffered using fifos and then sent to RAM. This helps prevent loss of data but adds to the latency.&lt;br /&gt;&lt;br /&gt;Everything seems to be legit. Only optimisation I can see is that instead of one read port, two can be used to pipline read cycles. So when one read data fifo is completely read and there is still space in the JPEG buffer, data from second read data fifo can be used. But since this is a DDR2 ram operating at 325 Mhz read time from RAM to fifo should not be great, so using two ports won't change much.&lt;br /&gt;&lt;br /&gt;Also, an inherent problem with the jpeg algorithm design is that 8 lines are required to start encoding. Since processing of frame is not pipelined as seen above and after processing of a frame the system resets, for a resolution of 1024x768, in every frame there is a stall of 1024*8 cycles. &lt;br /&gt;&lt;br /&gt;Tomorrow (I mean today) I will try to test the bandwidth of USB. &lt;a href=&quot;http://www.cypress.com/?id=4&amp;amp;rID=32888&quot;&gt;This article&lt;/a&gt; says maximum throughput is 40 MBps. So for 30 fps frame rate of 1024x768 resolution frames, the minimum bandwidth (assuming compression ratio of 10) should be (1024*768*24*30/10)/1024/1024 = 54MBps. Am I missing something?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>GSoC Update 6-19</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/20/gsoc-update-6-19/</link>
      <description>&lt;h2&gt;Snippets for today&lt;/h2&gt;

</description>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/20/gsoc-update-6-19/</guid>
      <dc:date>2014-06-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>[GSoC Daily Log]: Trails &amp;amp; errors</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/gsoc-daily-log-trails-errors/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-4adff4a2-bdb2-73ef-c0de-950be94058a8&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Friday, 20th June 2014:&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-4adff4a2-bdb2-73ef-c0de-950be94058a8&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Removing the DATACK TIMESPEC constraint seems to have removed the frame losses/screen going blank. Consistency: Good. No frame dropping!&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Adding back DATACK TIMESPEC but now, mentioning period in ‘time’ as ‘ns’ for both TNM_DATACK and TNM_PCLK. Result: Almost same as before. But frame drops. Also I think *slightly* more flickering&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Removing back the TNM_DATACK but retaining TNM_CLK with 15.384 ns as PERIOD. Result: No frame drop. Flickering same as in first case.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Now removing all the timespec constraints. Result: 1 or 2 frame drops. No noticeable performance improvement. Putting them back (except the TNM_DATACK)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;[Day]&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Testing: generating HDMI with only pixel clock, others logically generated. &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: circle; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;With Jahanzeb’s Test Pattern: Still shaking &amp;amp; Frame drops. That means, clock is not stable.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: circle; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;With my dynamic test pattern: Still shaking &amp;amp; Frame losses.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Now, testing with inbuilt clock, dynamic pattern. &lt;b&gt;Result:&lt;/b&gt; Obviously perfect image without any frame loss. So, &lt;b&gt;One culprit is caught: Unstable pixel clock (DATACK)&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Tried Oversampling: Didn’t work (ie with my implementation which may be wrong)&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Narrowed down the issue to: Async_edge detected HSYNC/VSYNC vs proper synchronised edge detected HSYNC/VSYNC...also pixel clock is unstable&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://dreamsxtrinsic.blogspot.com/&quot;&gt;Dreams eXtrinsic&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 20 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/20/gsoc-daily-log-trails-errors/</guid>
      <dc:date>2014-06-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Week 4 summary: Speed bumps!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/week-4-summary-speed-bumps/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Last week was spent on forming the functional description of serial expansion board – what features need to be there, what all functionality is reasonable and feasible to add and how they would work together. I had also discussed with my mentor the board’s design, its modularity and how everything will fit inside the chassis. But there was an important question left to explore - how can we implement USB-Serial interface in the most efficient way – which was not an easy question to answer.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;This week was all about getting deeper into physical description of serial expansion board with aim to start building PCB design as soon as possible, but a lot of problems and questions came along the way some of which will need us to reconsider the functional description of the serial interface board. And we have been still carrying the same question this week, which by far is most important one – how would the USB serial interface work? What are the maximum no. of serial ports we can support? This has been keeping me from updating a lot of things in the requirements document which are pending, from mechanical specs to component selection.&lt;br /&gt;&lt;br /&gt;Our PTZ cameras require hardware flow control. So those seemingly extra pins in the DB-9 connector for RTS/CTS and DTR/DSR pins are indeed needed. Sony cameras use DTR/DSR pins for handshaking and Canon uses RTS/CTS. Handshaking is important in PTZ cameras because the tasks they perform are mechanical (slow) in nature and they can easily miss out commands due to buffer overflow and perform erratically. So the requirement of having handshaking makes our original question even more complex. If that’s not enough, linux does not natively support DTR/DSR handshaking. Also there were a few other questions that I had in mind but I didn’t discuss because I was more occupied with the above issues. These were:&lt;br /&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt; text-align: left;&quot;&gt;&lt;li&gt;Board design width – What is the maximum permissible width of the motherboard?&lt;/li&gt;&lt;li&gt;DMX – We have a transmit channel, do we need a receive channel? What kind of devices are to be supported?&lt;/li&gt;&lt;li&gt;MIDI – Same question ^&lt;/li&gt;&lt;li&gt;IR remote type – IR remote control protocols are not standardized. I need to know what kind of IR remote control the IR receiver is going to be designed for. Or do we need &lt;a href=&quot;http://en.wikipedia.org/wiki/Infrared_Data_Association&quot;&gt;IrDA&lt;/a&gt;?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;A lot of similar concerns were there for which I found workarounds. Like: &lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;What will be the elevation of daughter board?&lt;/li&gt;&lt;li&gt;How will the headers fit to the DB9 footprint?&lt;/li&gt;&lt;li&gt;How to solve the issue of redundancy of RS232 drivers?&lt;/li&gt;&lt;/ul&gt;I have answered these and many others in the &lt;a href=&quot;https://docs.google.com/document/d/1xIML-TEmq--nJXuKta11v-6DK-Rkrs5hGJjJTQXrQUg/edit&quot;&gt;requirements document&lt;/a&gt; for serial expansion board.&lt;br /&gt;&lt;br /&gt;We were counting on the Cypress FX2LP USB engine to implement serial ports. USB has 16 endpoints, EP 0 is reserved and the HDMI2USB firmware in Cypress FX2LP uses only EP 1, 2, 4 and 6. I also noticed that the USB allows use to use the same endpoint number for both direction, so the EP 2 and 4 being used for control serial port of HDMI2USB could be integrated into one endpoint. Based on this understanding I assuming 11 free endpoints are there and I was looking forward to implement up to 8 bulk-only virtual serial ports which require only one endpoint no. per serial port if we do not implement hardware flow control.&lt;br /&gt;&lt;br /&gt;On reading the Technical Reference Manual which I sadly didn’t find earlier I finally got answer to my question. And the answer was 0! We can’t have extra serial ports at all because it supports only a few endpoints which are 1,2,4,6 and 8. We made a false assumption that the Cypress FX2LP is a USB controller aimed at flexibility. But it’s rather aimed for high speed transfers and it seems to internally combine these end-points to have reduced no. of large endpoints for achieving higher throughput. Cypress FX2LP is not open-source and there is not much known about its internal operation so it cannot be modified to support our needs.&lt;br /&gt;The bottomline&lt;br /&gt;I do not see any way to use Cypress FX2LP for implementing extra serial ports. And there’s no way a custom multiplexed protocol would work without writing a driver for it (and making it support a number of OSes). Neither the serial driver supports any form of multiplexing. We need to iterate on forming the higher level description of serial expansion board.&lt;br /&gt;&lt;br /&gt;Here’s what I propose as of now: Let’s use PIC18F being used in production board to implement the USB-Serial interfaces. This brings up some initial questions to ask my from mentor (if he agrees):&lt;br /&gt;Why was that particular chip (PIC18F85J94) chosen?&lt;br /&gt;Do we plan to use a USB Hub to combine the HDMI2USB and PIC18F’s USB?&lt;br /&gt;That MCU supports only 4 USARTs, if we need more then we would have to bitbang serial ports. Will the MCU handle the workload in additional to existing functionality there?&lt;br /&gt;&lt;br /&gt;A plenty of discussion is pending on us to overcome issues.&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ptzfortimvideos-gsoc14.blogspot.com/&quot;&gt;Serial port expansion for HDMI2USB with PTZ camera control example&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/week-4-summary-speed-bumps/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>TimVideo GSoC 2014: MJPEG Optimisation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/timvideo-gsoc-2014-mjpeg-optimisation/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I completed the coding part for the simulation of HDMI2USB. The main aim for this was to check whether the read and write pattern used in DDR2 Ram is optimum. For this I removed all the parts which did not affect the read and write performance of DDR2 Ram like EDID, USB etc. The&amp;nbsp; only problem is that the simulation takes up a lot of time. It takes upto 4 hrs for the calibration of DDR2 ram. I am currently simulating it. I will wake up and check the waveforms. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/timvideo-gsoc-2014-mjpeg-optimisation/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Testing and expansion of RTP Verilog model continues ...</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/testing-and-expansion-of-rtp-verilog-model-contin/</link>
      <description>The RTP Verilog RTL is complete and now it sends full 1280 pixel line (1280 x 3 bytes) as three packets of size 1281 bytes, 1281 bytes and 1278 bytes. See the &lt;b&gt;&lt;i&gt;revised&lt;/i&gt;&lt;/b&gt; &lt;a href=&quot;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit?pli=1&quot;&gt;Specification&lt;/a&gt;&amp;nbsp;(in particular page 2). The difference from yesterday is the amount of data and testing. Yesterday it was tested with toy data. Today it is tested with data that is close to real life i.e., full 1280 pixel lines&lt;br /&gt;&lt;br /&gt;The RTP Verilog RTL is uploaded to &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/6bb7705b9842/sim_models/?at=master&quot;&gt;bitbucket&lt;/a&gt;. The design has also gone through synthesis and post-synthesis simulation &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/6bb7705b9842597bbc7ccd78717d62b31f7a3e55/sim_models/rtp_xilinx/rtp/postsyn/?at=master&quot;&gt;Link&lt;/a&gt;. If you run post-synthesis simulation, you may not observe anything at the output. The reason is that pkt_data is no longer an output port. This is because&lt;br /&gt;&lt;br /&gt;1) It was added for observability and debugging purposes. It is not part of upstream or &amp;nbsp; &amp;nbsp; &amp;nbsp;downstream interfaces&lt;br /&gt;2) Its size is huge i.e., 1300 bytes i.e., reg [1300*8-1:0] pkt_data . Xilinx Spartan6 FPGA does not have these many pins to allocate.&lt;br /&gt;&lt;br /&gt;For above reasons, pkt_data is kept as an internal signal for synthesis. &lt;b&gt;But&lt;/b&gt; this is not the case in RTL, where pkt_data signal is available as an output port so you may see full pkt_data as shown below. I am showing one packet (i.e. first 1281 bytes of the first pixel line). 4136 is the time stamp in nanoseconds&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: purple;&quot;&gt;&amp;nbsp;4316: 8018000000000000000000000000&lt;/span&gt;&lt;span style=&quot;color: orange;&quot;&gt;0501&lt;/span&gt;&lt;span style=&quot;color: red;&quot;&gt;001a0&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;0000&lt;/span&gt;&lt;span style=&quot;color: purple;&quot;&gt;00000000100000200000300000400000500000600000700000800000900000a00000b00000c00000d00000e00000f00001000001100001200001300001400001500001600001700001800001900001a00001b00001c00001d00001e00001f00002000002100002200002300002400002500002600002700002800002900002a00002b00002c00002d00002e00002f00003000003100003200003300003400003500003600003700003800003900003a00003b00003c00003d00003e00003f00004000004100004200004300004400004500004600004700004800004900004a00004b00004c00004d00004e00004f00005000005100005200005300005400005500005600005700005800005900005a00005b00005c00005d00005e00005f00006000006100006200006300006400006500006600006700006800006900006a00006b00006c00006d00006e00006f00007000007100007200007300007400007500007600007700007800007900007a00007b00007c00007d00007e00007f00008000008100008200008300008400008500008600008700008800008900008a00008b00008c00008d00008e00008f00009000009100009200009300009400009500009600009700009800009900009a00009b00009c00009d00009e00009f0000a00000a10000a20000a30000a40000a50000a60000a70000a80000a90000aa0000ab0000ac0000ad0000ae0000af0000b00000b10000b20000b30000b40000b50000b60000b70000b80000b90000ba0000bb0000bc0000bd0000be0000bf0000c00000c10000c20000c30000c40000c50000c60000c70000c80000c90000ca0000cb0000cc0000cd0000ce0000cf0000d00000d10000d20000d30000d40000d50000d60000d70000d80000d90000da0000db0000dc0000dd0000de0000df0000e00000e10000e20000e30000e40000e50000e60000e70000e80000e90000ea0000eb0000ec0000ed0000ee0000ef0000f00000f10000f20000f30000f40000f50000f60000f70000f80000f90000fa0000fb0000fc0000fd0000fe0000ff00010000010100010200010300010400010500010600010700010800010900010a00010b00010c00010d00010e00010f00011000011100011200011300011400011500011600011700011800011900011a00011b00011c00011d00011e00011f00012000012100012200012300012400012500012600012700012800012900012a00012b00012c00012d00012e00012f00013000013100013200013300013400013500013600013700013800013900013a00013b00013c00013d00013e00013f00014000014100014200014300014400014500014600014700014800014900014a00014b00014c00014d00014e00014f00015000015100015200015300015400015500015600015700015800015900015a00015b00015c00015d00015e00015f00016000016100016200016300016400016500016600016700016800016900016a00016b00016c00016d00016e00016f00017000017100017200017300017400017500017600017700017800017900017a00017b00017c00017d00017e00017f00018000018100018200018300018400018500018600018700018800018900018a00018b00018c00018d00018e00018f00019000019100019200019300019400019500019600019700019800019900019a00019b00019c00019d00019e00019f0001a00001a10001a20001a30001a40001a50001a60001a70001a80001a900&lt;/span&gt;&lt;span style=&quot;color: #f1c232;&quot;&gt;01aa&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #f1c232;&quot;&gt;&lt;br /&gt;&lt;/span&gt;The last RGB value is 0x01aa which translates to 426. Since the payload started from 0, there are 427 pixel values (427x3 = 1281 bytes) have been packetized as RTP payload. I kept the RGB data as monotonically increasing integers starting from 0 to simplify testing and debugging. The design does not drop a single RGB data across packet boundaries. I have myself verified this. If you can find bugs in this code, please bring them to my attention by submitting a pull request or commenting below.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Time permitting, i will look at MyHDL stuff as Chris has put a lot of stuff. See yaa&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/testing-and-expansion-of-rtp-verilog-model-contin/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP Verilog Code and Synthesis</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/rtp-verilog-code-and-synthesis/</link>
      <description>Today was getting hands dirty writing Verilog code. The interface of the RTP core is shown in Figure 6 of&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;Specification&lt;/a&gt;. Note that RTP core will add UDP/IP and Ethernet Headers as well in the near future. The code correctly generates RTP packet i.e., header and payload (chosen to be small enough to debug).The design has also gone through synthesis Xilinx Synthesis flow and successfully post-synthesis simulation. The code is available on &lt;a href=&quot;http://bit.ly/1lYcoMJ&quot;&gt;bitbucket&lt;/a&gt;. The RTL file for RTP is &lt;a href=&quot;http://bit.ly/1quEJNJ&quot;&gt;packetizer.v&lt;/a&gt;, the testbench is &lt;a href=&quot;http://bit.ly/1invEnr&quot;&gt;tb_packetizer.v&lt;/a&gt;. The post-synthesis netlist is &lt;a href=&quot;http://bit.ly/1oJjDeJ&quot;&gt;packetizer_synthesis.v&lt;/a&gt;. You need Xilinx unisims, simprims, uni9000 and unimacro libraries to run the post-synthesis simulation.&lt;br /&gt;&lt;br /&gt;Here is a brief log of the RTL Run. If you have read the&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;Specification&lt;/a&gt;&amp;nbsp;(in particular pages 3-4), this should make sense&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 0: 0000000000000000000000000000000000000000000000000000000000&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;145: 80180000000000000000000000000500001a0000000007000008000009&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;195: 80180001000000000000000000000500001a050000000a00000b00000c&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;245: 80180002000000000000000000000500001a0a0000000d00000e00000f&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;295: 80180003000000000000000000000500001b0000000010000011000012&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;345: 80180004000000000000000000000500001b0500000013000014000015&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;395: 80180005000000000000000000000500001b0a00000016000017000018&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;445: 80180006000000000000000000000500001c000000001900001a00001b&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;495: 80180007000000000000000000000500001c050000001c00001d00001e&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; Here is a snapshot of the RTL simulation&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-hVCyhNycw2Y/U6KSIWeceqI/AAAAAAAAAIQ/kksWosCoLvk/s1600/rtp_rtl_sim.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-hVCyhNycw2Y/U6KSIWeceqI/AAAAAAAAAIQ/kksWosCoLvk/s1600/rtp_rtl_sim.jpg&quot; height=&quot;166&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Here is a brief log of the post-synthesis simulation&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0: 0000000000000000000000000000000000000000000000000000000000&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;145: 80180000000000000000000000000500001a0000000007000008000009&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;195: 80180001000000000000000000000500001a050000000a00000b00000c&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;245: 80180002000000000000000000000500001a0a0000000d00000e00000f&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;295: 80180003000000000000000000000500001b0000000010000011000012&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;345: 80180004000000000000000000000500001b0500000013000014000015&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;395: 80180005000000000000000000000500001b0a00000016000017000018&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;445: 80180006000000000000000000000500001c000000001900001a00001b&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;495: 80180007000000000000000000000500001c050000001c00001d00001e&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;545: 80180008000000000000000000000500001c0a0000001f000020000021&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;595: 80180009000000000000000000000500001d0000000022000023000024&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Here is a snapshot of the post-synthesis simulation&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-YGeEBwTp1wE/U6KS04NwoCI/AAAAAAAAAIY/31BLIFfAg4k/s1600/rtp_postsynl_sim.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-YGeEBwTp1wE/U6KS04NwoCI/AAAAAAAAAIY/31BLIFfAg4k/s1600/rtp_postsynl_sim.jpg&quot; height=&quot;135&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The Synthesis summary report is &lt;a href=&quot;http://bit.ly/1nRfjqe&quot;&gt;packetizer.syr&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As the code is uploaded to&amp;nbsp;&lt;a href=&quot;http://bit.ly/1lYcoMJ&quot;&gt;bitbucket&lt;/a&gt;&lt;b&gt;, &lt;/b&gt;please help test it. Thanks in advance&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/rtp-verilog-code-and-synthesis/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>I'm Back!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/i-m-back/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Finally I am back from my trip to US. The competition didn't go the way I wanted it to be. Our cansat did not send any telemetry. Also it landed in a sunflower field which meant we could not recover the cansat and the onboard memory which had all the telemetry data. But it was a good learning experience, plus I got a chance to meet people from all over the world which was great.&lt;br /&gt;I will resume working on the project. I will continue my work on simulating the HDMI2USB firmware. Hopefully, I will be able to come up with something fruitful by the end of this week. &lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ajitmathewgsoc.blogspot.com/&quot;&gt;TimVideo GSoC 2014: MJPEG Optimisation&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/i-m-back/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>[GSoC Snippet] 19/06/2014</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/19/gsoc-snippet-19-06-2014/</link>
      <description>&lt;b&gt;[design] &lt;/b&gt;small modification, move includes into folder, add edit button and connect it with GitHub Api Interface&lt;br /&gt;&lt;b&gt;[talk] &lt;/b&gt;a lot of talk with Tim about my project, about main goals, ideas, etc. :+1:&lt;br /&gt;&lt;b&gt;[code] &lt;/b&gt;created edit link liquid tag to easly adding edit tag, you only need to specify path for editing tool and all links will be generated automatically&lt;br /&gt;&lt;b&gt;[code] &lt;/b&gt;created People page that fetches data from GitHub on client side (needs to be ported to fetch data on server side)&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://pinoit.blogspot.com&quot;&gt;pino IT / ruby / developer&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/19/gsoc-snippet-19-06-2014/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>[GSoC Daily Log]: Major improvement!</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/gsoc-daily-log-major-improvement/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-4adff4a2-b51a-bf6d-a3e6-b506a074cd0b&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Thursday, 19th June 2014:&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-4adff4a2-b51a-bf6d-a3e6-b506a074cd0b&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Tried different cases to remove messy capture and flickers.&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Rewrote code many times&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: circle; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Result: Major improvement in the capture quality&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: circle; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Still quite a number of flickerings&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Previous issue was mostly due to bad code and the incorrect edge detector. HSOUT and VSOUT were also not processed/read properly.&lt;/span&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Test code: &lt;/span&gt;&lt;a href=&quot;https://github.com/rohit91/vmodvga-testcodes/tree/master/HDMI_Test_v04&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline;&quot;&gt;https://github.com/rohit91/vmodvga-testcodes/tree/master/HDMI_Test_v04&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline;&quot;&gt;Next goal: To remove flickers&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Video 1:&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/8NJKg4NfHsk?rel=0&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt; &lt;br /&gt;Video 2 (from my Desktop PC running Windows XP):&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/fgf4bPwXmHM?rel=0&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt; &lt;br /&gt;Video 3:&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/KBpUmU1HUuM?rel=0&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt; &lt;br /&gt;Video 4:&lt;br /&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/cR2D-_gYayQ?rel=0&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt; &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://dreamsxtrinsic.blogspot.com/&quot;&gt;Dreams eXtrinsic&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/gsoc-daily-log-major-improvement/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Daily snippet</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/daily-snippet/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;Started motherboard schematics&lt;/li&gt;&lt;li&gt;Filling out mechanical info &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1lOAKj-r80o0KVlB-AP-42tiUY0Hg50EkQTgRwYNMilk/edit#gid=0&quot; target=&quot;_blank&quot;&gt;spreadsheet&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://ptzfortimvideos-gsoc14.blogspot.com/&quot;&gt;Serial port expansion for HDMI2USB with PTZ camera control example&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 19 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/19/daily-snippet/</guid>
      <dc:date>2014-06-19T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Running a Flumotion Docker Image</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/18/running-a-flumotion-docker-image/</link>
      <description>&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://mstritzi.nfshost.com/blog&quot;&gt;Max Stritzinger&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/18/running-a-flumotion-docker-image/</guid>
      <dc:date>2014-06-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Documentation and Looking at UDP core</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/18/documentation-and-looking-at-udp-core/</link>
      <description>Part of good working habit is to document every thing. I have seen it and i believe it is extremely useful. So read the &lt;a href=&quot;http://bit.ly/1l1Id7e&quot;&gt;Spec&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;As i am done with RTP golden model, i am about to write RTP Verilog model. I was figuring out myself as well as with my mentor what would the interface to UDP core look like.There are two possibilities&lt;br /&gt;&lt;br /&gt;1)Assume there is downstream UDP core to begin with that accepts data.In this case, interface is easy as you can see how UDP accepts data.&lt;br /&gt;&lt;br /&gt;2) If no UDP core or UDP core does not have interface to accept data, then you can add UDP header on the same spot where you are inserting RTP header. Not only that, you can also insert IP header as well. That means now you have to interface RTP with the MAC core.&lt;br /&gt;&lt;br /&gt;The two cores i looked at are&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://www.joelw.id.au/FPGA/DigilentAtlysResources&quot;&gt;http://www.joelw.id.au/FPGA/DigilentAtlysResources&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;This falls in the 2nd category&lt;br /&gt;&lt;br /&gt;and&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;http://opencores.org/project,udp_ip_stack&quot;&gt;http://opencores.org/project,udp_ip_stack&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;which is sadly down throughout today and i could n't figure out if it belongs to 1st of 2nd category. I will try again tomorrow.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/18/documentation-and-looking-at-udp-core/</guid>
      <dc:date>2014-06-18T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Week 4 Progress</title>
      <link>http://planet.timvideos.us/gsoc-2014/2014/06/17/week-4-progress/</link>
      <description>&lt;p&gt;I started with some missed changes and continued with porting of Theora encoder, Ogg muxer and httpstreamer consumer. With these components, I was able to “watch” a test video stream.&lt;/p&gt;

</description>
      <pubDate>Tue, 17 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014/2014/06/17/week-4-progress/</guid>
      <dc:date>2014-06-17T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-06-21T00:00:00+00:00</dc:date>
  </channel>
</rss>