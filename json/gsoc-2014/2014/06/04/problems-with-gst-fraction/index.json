{"title":"Problems with Gst.Fraction","created_at":"2014-06-04 00:00:00 UTC","author":"Amanpreet (Porting Flumotion)","content":"<p>There is a Fraction class I need to port but I’m facing a few problems.</p>\n\n<p>In gst-0.10, we use it like <code>gst.Fraction(2,4)</code> and we get a <code>&lt;gst.Fraction 1/2&gt;</code> Here’s the details of gst.Fraction :</p>\n\n<div class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">Type</span><span class=\"p\">:</span>            <span class=\"n\">classobj</span>\n<span class=\"n\">String</span> <span class=\"n\">form</span><span class=\"p\">:</span>     <span class=\"n\">gst</span><span class=\"o\">.</span><span class=\"n\">Fraction</span>\n<span class=\"n\">File</span><span class=\"p\">:</span>            <span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">python2</span><span class=\"o\">.</span><span class=\"mi\">7</span><span class=\"o\">/</span><span class=\"n\">dist</span><span class=\"o\">-</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">gst</span><span class=\"o\">-</span><span class=\"mf\">0.10</span><span class=\"o\">/</span><span class=\"n\">gst</span><span class=\"o\">/</span><span class=\"n\">__init__</span><span class=\"o\">.</span><span class=\"n\">py</span>\n<span class=\"n\">Init</span> <span class=\"n\">definition</span><span class=\"p\">:</span> <span class=\"n\">gst</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">denom</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Source</span><span class=\"p\">:</span>\n<span class=\"k\">class</span> <span class=\"nc\">Fraction</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">denom</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">__gcd</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">):</span>\n            <span class=\"k\">while</span> <span class=\"n\">b</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">a</span>\n                <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">b</span>\n                <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span> <span class=\"o\">%</span> <span class=\"n\">b</span>\n            <span class=\"k\">return</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">__simplify</span><span class=\"p\">():</span>\n            <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span>\n            <span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span>\n    \n            <span class=\"k\">if</span> <span class=\"n\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">num</span>\n                <span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">denom</span>\n    \n            <span class=\"c\"># Compute greatest common divisor</span>\n            <span class=\"n\">gcd</span> <span class=\"o\">=</span> <span class=\"n\">__gcd</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">,</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">gcd</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n              <span class=\"n\">num</span> <span class=\"o\">/=</span> <span class=\"n\">gcd</span>\n              <span class=\"n\">denom</span> <span class=\"o\">/=</span> <span class=\"n\">gcd</span>\n    \n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"n\">denom</span>\n\n        <span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s\">&#39;fraction&#39;</span><span class=\"p\">)</span>\n    \n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">=</span> <span class=\"n\">denom</span>\n\n        <span class=\"n\">__simplify</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#39;&lt;gst.Fraction </span><span class=\"si\">%d</span><span class=\"s\">/</span><span class=\"si\">%d</span><span class=\"s\">&gt;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Fraction</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__ne__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__eq__</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__mul__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Fraction</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span>\n\n    <span class=\"n\">__rmul__</span> <span class=\"o\">=</span> <span class=\"n\">__mul__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__div__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Fraction</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"ne\">TypeError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__rdiv__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Fraction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span> <span class=\"o\">*</span> <span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"ne\">TypeError</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__float__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">denom</span><span class=\"p\">)</span></code></pre></div>\n\n<p>Now, gi has some overrides to achieve this functionality. But, this is not available in Gstreamer-1.2.1 (latest version available in Ubuntu 12.04). So, I tried implementing it in this <a href=\"https://github.com/aps-sids/flumotion-orig/commit/da4e2cb84f4b883158c4fb17c5b31eecc2b745a6\">commit</a>. It failed with this error:</p>\n\n<div class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s\">&quot;/home/aps/workspace/gsoc/flumotion-orig/bin/flumotion-manager&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">flumotion.common</span> <span class=\"kn\">import</span> <span class=\"n\">boot</span>\n  <span class=\"n\">File</span> <span class=\"s\">&quot;/home/aps/workspace/gsoc/flumotion-orig/flumotion/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Fraction</span><span class=\"p\">(</span><span class=\"n\">Gst</span><span class=\"o\">.</span><span class=\"n\">Fraction</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s\">&quot;/usr/lib/python2.7/dist-packages/gi/types.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">212</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__init__</span>\n    <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">GObjectMeta</span><span class=\"p\">,</span> <span class=\"n\">cls</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">dict_</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s\">&quot;/usr/lib/python2.7/dist-packages/gi/_gobject/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">__init__</span>\n    <span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"n\">_type_register</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"n\">__dict__</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s\">&quot;/usr/lib/python2.7/dist-packages/gi/_gobject/__init__.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">119</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">_type_register</span>\n    <span class=\"n\">type_register</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">&#39;__gtype_name__&#39;</span><span class=\"p\">))</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Error</span> <span class=\"n\">when</span> <span class=\"n\">calling</span> <span class=\"n\">the</span> <span class=\"n\">metaclass</span> <span class=\"n\">bases</span>\n    <span class=\"n\">argument</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">a</span> <span class=\"n\">GObject</span> <span class=\"n\">subclass</span></code></pre></div>\n\n<p>But, running    <code>Gst.Fraction.__class__</code>      in python shell gives output   <code>gi.types.GObjectMeta</code></p>\n\n<p>Placing the <a href=\"http://cgit.freedesktop.org/gstreamer/gst-python/tree/gi/overrides/Gst.py\">Gst.py</a> file inside /usr/lib/python27/dist-packages/gi/overrides/ fixes the problem but it’s not a good/valid fix.</p>\n\n<p>The only (hackish) way I could think of is writing a function that gives same results (if possible) as Gst.Fraction. If you can think of any idea, please let me know in comments. Thanks!</p><div class=\"author\">\n  <span>\n    <i>Originally posted on <a href=\"http://aps-sids.github.io/porting-flumotion\">Porting Flumotion - GSoC '14 Progress Blog</a></i>\n  </span>\n</div>\n"}