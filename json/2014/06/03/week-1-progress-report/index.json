{"title":"Week 1 Progress Report","content":"---\ntitle: \"Week 1 progress report\"\nkind: article\ncreated_at: 2014-06-03 06:18:00 UTC\nauthor: Ayush (PTZ/Serial Extension)\nimage: https://avatars0.githubusercontent.com/u/4787914?s=50\ncategories: GSoC-2014-HDMI2USB\ntags: \"news hdmi2usb ptz serial-extension\"\nlayout: post\n---<div dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"><div style=\"text-align: left;\"><b>Serial expansion board status:</b></div><div style=\"text-align: left;\">- Decided to keep RJ45, DB9 and DIN8 connectors. RJ45 will be for RS422/485 only. If anyone needs RS232 over RJ45 they may use a DB9 to RJ45 converter cable. The board would get complicated if an option for giving both RS232 and RS485 through RJ-45 has to be provided.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- I will be using separate line-drivers for RS232 and RS485, no SP33x. This gives user an option to populate the components depending on what their camera supports</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- To ensure flexibility of choosing VHDCI pins in the serial expansion board, I see the only economical way is to create pads that can be soldered manually through wires.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Vswt (Unregulated 5V) will be used to power the line-drivers and GPIO header. There will be a fusible resistor to protect the board from overcurrent.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- GPIO header will use an 8-bit bidirectional logic level translator. (Looking for cheapest part that does the job right)</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- GPIO header will be 10 pin and will include Ground and 5V supply.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- ESD protectors chosen: GSOT05C (5 will be used near the VHDCI connector)</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Final schematics should be available in 1 or 2 days</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>VHDL:</b></div><div style=\"text-align: left;\">- Tried implementing HDMI2USB (master) on Xilinx ISE 14.7 - takes 15 min from synthesize to bitstream on Ubuntu 14.04 LTS (64-bit) and&nbsp;30 min on my Windows XP (32-bit) VM. My machine has an&nbsp;i5-2520M and 8GB RAM.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Started reading material on&nbsp;http://www.asic-world.com/vhdl/</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Cypress FX2LP:</b></div>-From my reading I found that the Cypress chip uses the GPIF interface to send bitstreams to the FPGA during programming mode and uses the endpoint buffers called Slave FIFOs to communicate during normal operation of the device. My concern was mainly to check if the FPGA can access these additional endpoints that I would create and that’s indeed possible by accessing the respective FIFOs in the Cypress chip. <br /><div class=\"MsoNormal\" style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;\"><br /></div>This can be seen in usb_top.vhd:<br /><div class=\"MsoNormal\" style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px; line-height: 13.5pt; margin-bottom: 0.0001pt;\"><b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp; constant</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;cdcout&nbsp;<b>:</b>&nbsp;</span><b><span style=\"color: #445588; font-family: 'Courier New'; font-size: 9pt;\">std_logic_vector</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">(</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">1</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;<b>downto</b>&nbsp;</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">0</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">)<b>:=</b>&nbsp;</span><span style=\"color: #dd1144; font-family: 'Courier New'; font-size: 9pt;\">\"00\"</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">;&nbsp;</span><i><span style=\"color: #999988; font-family: 'Courier New'; font-size: 9pt;\">--ep 2</span></i><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\"></span></div><div class=\"MsoNormal\" style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px; line-height: 13.5pt; margin-bottom: 0.0001pt;\"><b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp; constant</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;cdcin&nbsp;&nbsp;<b>:</b>&nbsp;</span><b><span style=\"color: #445588; font-family: 'Courier New'; font-size: 9pt;\">std_logic_vector</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">(</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">1</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;<b>downto</b>&nbsp;</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">0</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">)<b>:=</b>&nbsp;</span><span style=\"color: #dd1144; font-family: 'Courier New'; font-size: 9pt;\">\"01\"</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">;&nbsp;</span><i><span style=\"color: #999988; font-family: 'Courier New'; font-size: 9pt;\">--ep 4</span></i><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\"></span></div><div class=\"MsoNormal\" style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px; line-height: 13.5pt; margin-bottom: 0.0001pt;\"><b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp; constant</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;uvcin&nbsp;&nbsp;<b>:</b>&nbsp;</span><b><span style=\"color: #445588; font-family: 'Courier New'; font-size: 9pt;\">std_logic_vector</span></b><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">(</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">1</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">&nbsp;<b>downto</b>&nbsp;</span><span style=\"color: #009999; font-family: 'Courier New'; font-size: 9pt;\">0</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">)<b>:=</b>&nbsp;</span><span style=\"color: #dd1144; font-family: 'Courier New'; font-size: 9pt;\">\"10\"</span><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\">;&nbsp;</span><i><span style=\"color: #999988; font-family: 'Courier New'; font-size: 9pt;\">--ep 6</span></i><span style=\"color: #333333; font-family: 'Courier New'; font-size: 9pt;\"></span></div><div class=\"MsoNormal\" style=\"background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;\"><br /></div>So the task of adding more CDC ACM devices would involve:<br />·         Changing the USB descriptors to describe new interfaces for new CDC ACM devices and their endpoints<br />·         Interfacing the new endpoints to GPIOs in usb_top.vhd<br /><br />- Revisiting the following diagram (from my proposal) shows a little bit about how the FX2LP is seen as endpoint buffers by the FPGA:<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/-lVmm_YVQhbA/U41mi1z8LDI/AAAAAAAACWE/XDD0aDCojlc/s1600/Detailed+architecture+0.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/-lVmm_YVQhbA/U41mi1z8LDI/AAAAAAAACWE/XDD0aDCojlc/s1600/Detailed+architecture+0.png\" height=\"640\" width=\"358\" /></a></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Just installed their SDK, going through their docs</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Decided on implementing just 2 extra serial ports for now. Procedure for adding more will be documented. Adding more ports dynamically will not be provided in run-time for now.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">- Wondering about the driver signing issues I might have in Windows for the custom INFs I will be creating.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>Things for coming week:</b></div><div style=\"text-align: left;\"><b>- </b>Complete the PCB and generate gerber! Will order once we agree on it.<br /><br /></div><div style=\"text-align: left;\">- Look deeper into FX2LP<br /><br /></div><div style=\"text-align: left;\">- Continue my FPGA tutorials</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /></div></div><div class=\"author\">\n  <span>\n    <i>Originally posted on <a href=\"http://ptzfortimvideos-gsoc14.blogspot.com/\">Serial port expansion for HDMI2USB with PTZ camera control example</a></i>\n  </span>\n</div>\n"}