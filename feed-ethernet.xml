<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Tim Videos Planet - Developers news - Tag: ETHERNET</title>
    <link>http://planet.timvideos.us</link>
    <description>News from our best developers, all news aggregated by planet.</description>
    <pubDate>Thu, 12 Jun 2014 00:00:00 +0000</pubDate>
    <item>
      <title>Unofficially on vacations</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/unofficially-on-vacations/</link>
      <description>I am on vacations but working on GSoC as well and as much as possible. This means i am not on vacations&lt;br /&gt;:(&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/unofficially-on-vacations/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP packet creation in Python from raw video stream</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/rtp-packet-creation-in-python-from-raw-video-stre/</link>
      <description>OK finally got the basic RTP packet creation done in Python using &lt;a href=&quot;http://www.myhdl.org/&quot;&gt;MyHDL &lt;/a&gt;and &lt;a href=&quot;https://code.google.com/p/dpkt/&quot;&gt;Dpkt&lt;/a&gt;&amp;nbsp;libraries&lt;br /&gt;Please look at the &lt;a href=&quot;https://bitbucket.org/tariq786/myhdl_projs/src/434d5bc39f9202fd10fd5c5c080975da51b28701/sim_models/verification.py?at=master&quot;&gt;source code&lt;/a&gt; here. Note that you need to have MyHDL and Dpkt libraries installed to get this code to run.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-NcrpEI867kM/U41UlkgumBI/AAAAAAAAAHs/uYXvOVrCeck/s1600/write_image_buffer_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://1.bp.blogspot.com/-NcrpEI867kM/U41UlkgumBI/AAAAAAAAAHs/uYXvOVrCeck/s1600/write_image_buffer_waveform.jpg&quot; height=&quot;60&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 1: Write into Image Buffer by raw HDMI stream&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-qEmkmVM2-MI/U41Uxlq80-I/AAAAAAAAAH0/AFs83KLs-Dc/s1600/read_image_buffer_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-qEmkmVM2-MI/U41Uxlq80-I/AAAAAAAAAH0/AFs83KLs-Dc/s1600/read_image_buffer_waveform.jpg&quot; height=&quot;61&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 2: Read from Image Buffer by RTP block&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Here is the RTP packet of length 1086 bytes. Only the RTP payload is shown.&lt;br /&gt;&lt;br /&gt;raw_byteslt;br /&gt;byte_cnt= 1086&lt;br /&gt;raw_cnt = 362&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;RTP header is not shown. It can be printed by calling pack_hdr( ) function on RTP object. Other functions that can be called on RTP object are&lt;br /&gt;&lt;br /&gt;cc &lt;br /&gt;csrc &lt;br /&gt;data &lt;br /&gt;m &lt;br /&gt;p &lt;br /&gt;pack &lt;br /&gt;pack_hdr &lt;br /&gt;pt &lt;br /&gt;seq &lt;br /&gt;ssrc &lt;br /&gt;ts &lt;br /&gt;unpack &lt;br /&gt;version &lt;br /&gt;x &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;This Python implementation of RTP will be used to test actual RTL implementation of RTP as shown below&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-b94002cf-6023-20a5-6b2c-e6d62eeef7df&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;220px;&quot; src=&quot;https://docs.google.com/drawings/d/sK8_LPYz7_UD1PDmvsPomvg/image?w=554&amp;amp;h=220&amp;amp;rev=131&amp;amp;ac=1&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;554px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 3: Use of RTP Python Model to Verify RTP Verilog RTL&lt;/div&gt;&lt;br /&gt;Well i thought i am on vacations but not officially i guess !!!!!&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 03 Jun 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/06/03/rtp-packet-creation-in-python-from-raw-video-stre/</guid>
      <dc:date>2014-06-03T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Out of town on Half Wednesday and Full Thursday</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/out-of-town-on-half-wednesday-and-full-thursday/</link>
      <description>Necessity is the mother of travel&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/out-of-town-on-half-wednesday-and-full-thursday/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Beating the Interfaces</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/beating-the-interfaces/</link>
      <description>I read and heard a lot about interface incompatibilities and how different understanding of an interface could cause misunderstanding between teams working together. I ran into the same issue. To fix this, and understand the top level interfaces of HDMI2USB, i ran FPGA synthesis on it so i can view the RTL schematic. Here is a snapshot of schematic successful synthesis.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-I7yVkRbUtRA/U4oRvQYCdDI/AAAAAAAAAHM/5czi06SuU6U/s1600/top_level_HDMI2USB.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-I7yVkRbUtRA/U4oRvQYCdDI/AAAAAAAAAHM/5czi06SuU6U/s1600/top_level_HDMI2USB.jpg&quot; height=&quot;320&quot; width=&quot;318&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 1: HDMI2USB at the top level&lt;/div&gt;&lt;br /&gt;Once you have this schematic, you can click on wires and blocks to see which is connected with which.&lt;br /&gt;&lt;br /&gt;My goal was to determine the interface of &lt;a href=&quot;https://bitbucket.org/tariq786/hdmi2usb/src/eaee2d1466ce118b5fe907b21b26352afb1c2e87/hdl/misc/image_buffer.vhd?at=master&quot;&gt;Image Buffer&lt;/a&gt;&amp;nbsp;to RTP Packetizer (it is still under development). After spending sometime and bouncing back and forth with mentor, i was able to understand it. The interface looks like following&lt;br /&gt;&lt;br /&gt;&lt;span id=&quot;docs-internal-guid-b94002cf-5359-be3d-6405-44897b12cc47&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img height=&quot;148px;&quot; src=&quot;https://docs.google.com/drawings/d/sljplwrNdUM7m3VJ2c2h29g/image?w=595&amp;amp;h=148&amp;amp;rev=612&amp;amp;ac=1&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;595px;&quot; /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 2 : RTP Interface with upstream Image Buffer (Red arrow shows Flow Control signals)&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Here is a text and graphical snapshot of the simulation of the Image Buffer. The text shows 4 writes into the FIFO using Bus in (while reads are blocked on Bus out) and then the 4 writes are read &amp;nbsp;on Bus out while blocking writes on Bus in.&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;#Simulation time [w=write operation] --&amp;gt; write address , &amp;nbsp;read address | input: enable status, fifo_full status bytes value , output: enable status, fifo_full status read value&lt;br /&gt;#Simulation time [r=read operation] --&amp;gt; read address , &amp;nbsp;write address | input: enable status, fifo_full status bytes value , output: enable status, fifo_full status read value&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;33: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 0, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 DE99C9, o:e0 f1 000000&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;div&gt;39: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 1, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 E95B32, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;45: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 2, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 0D2F9F, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;51: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 3, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 6B6951, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;57: &amp;nbsp;[w] &amp;nbsp;--&amp;gt; &amp;nbsp; 4, &amp;nbsp; &amp;nbsp;0 --&amp;gt; | i:e1 f0 549BB1, o:e1 f1 000000&lt;/div&gt;&lt;div&gt;63: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 0, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 000000&lt;/div&gt;&lt;div&gt;69: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 1, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 DE99C9&lt;/div&gt;&lt;div&gt;75: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 2, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 E95B32&lt;/div&gt;&lt;div&gt;81: &amp;nbsp;[r] &amp;nbsp;--&amp;gt; &amp;nbsp; 3, &amp;nbsp; &amp;nbsp;5 --&amp;gt; | i:e0 f0 549BB1, o:e1 f0 0D2F9F&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If the above looks gibberish to you, you can look at the waveform below or read the &lt;a href=&quot;http://bit.ly/1nPSHqQ&quot;&gt;source code&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-5uKO8FyjEig/U4oU9pLH5sI/AAAAAAAAAHU/5Wmy2WJ8iWE/s1600/fifo_write_then_read_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-5uKO8FyjEig/U4oU9pLH5sI/AAAAAAAAAHU/5Wmy2WJ8iWE/s1600/fifo_write_then_read_waveform.jpg&quot; height=&quot;78&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 3: Waveform of FIFO WRITE and then READ operations&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Also added basic RTP packet processing functionality in the&amp;nbsp;&lt;a href=&quot;http://bit.ly/1nPSHqQ&quot;&gt;source code&lt;/a&gt;&amp;nbsp;to receive raw data from Image Buffer and turn it into RTP packets.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/beating-the-interfaces/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Back in town and getting back to work</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/back-in-town-and-getting-back-to-work/</link>
      <description>I worked half a day on Wednesday and was out of town on Thursday. On Friday, i was home the whole day as i was not feeling well. You can ask so what?&lt;br /&gt;&lt;br /&gt;Now the plan is to work on the weekend to complete the 40 hours as well as next week during which i am suppose to be on vacation.&lt;br /&gt;&lt;br /&gt;I had taken GSoC on my nerves. That is why my sleep and work cycle got unbalanced this week. I want to unwind myself and today (Friday) i focused on that. My goal is to complete the project and enjoy the experience rather than hosed.&lt;br /&gt;&lt;br /&gt;Anyway, got MyHDL 0.9-dev working. Now i can pass interfaces. I was able to run the code passed to me by Chris. The code treats Image buffer FIFO as shown in Figure 2 of the Spec&lt;br /&gt;&lt;br /&gt;https://docs.google.com/document/d/1PSjfm6eS0B3UUPJmPf7PH0tNsF7ZFKIKfPldmF3ucKY/edit&lt;br /&gt;&lt;br /&gt;&lt;strike&gt;While, i am more inclined to use Figure 3. I have to resolve this with the mentor.&lt;/strike&gt;&lt;br /&gt;&lt;br /&gt;Tomorrow (Saturday May 31st), integration of simulation models of Image Buffer -&amp;gt; RTP -&amp;gt; UDP in MyHDL will be dealt with.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 31 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/31/back-in-town-and-getting-back-to-work/</guid>
      <dc:date>2014-05-31T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>FPGA Hello World</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/28/fpga-hello-world/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Got the Stroby working!!!. Here is the &lt;/span&gt;&lt;a href=&quot;https://drive.google.com/file/d/0B7QWctE40BXcM1JmX1pKbWZsZ3M/edit?usp=sharing&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;demo&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;.&lt;/span&gt;&lt;/div&gt;&lt;b id=&quot;docs-internal-guid-9f0da85b-40a9-291c-b0c7-3c87bd917108&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The updated files can be found on my &lt;/span&gt;&lt;a href=&quot;http://bit.ly/1ptt2DB&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;bitbucket&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Now Working on models for simulation and verification of HDMI2Ethernet pipeline as shown in the Figure below. Blue blocks show simulation models. Yellow Blocks show hardware models&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;img alt=&quot;simulation_models.jpg&quot; height=&quot;97px;&quot; src=&quot;https://lh4.googleusercontent.com/-IEfvPrFHlQ4LP_4K3_beTvCrLm4oKIs85_gNA4wC6huLjLFFnb6D8EU-0dbK8BQbZJMjH-3_5hqb3tBVHsYruHcIfoVPJx5ombe0W937ya7ibMPbDldTp9HK5Oo1L9gaQ&quot; style=&quot;-webkit-transform: rotate(0.00rad); border: none; transform: rotate(0.00rad);&quot; width=&quot;624px;&quot; /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt; text-indent: 36pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Figure 1: HDM2Ethernet Simulation and Verification flow&lt;/span&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The idea is first create accurate golden model for hardware blocks. This is to make sure RTP packets are generated, encapsulated as UDP packets, UDP gets encapsulated as IP packets and IP packets are encapsulated as Ethernet packets.&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The goal of this week is to create golden model for packetizer and test it together with upstream and downstream blocks.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/28/fpga-hello-world/</guid>
      <dc:date>2014-05-28T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Opening the Xilinx Atlys Board</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/27/opening-the-xilinx-atlys-board/</link>
      <description>&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Items that i want to cover today&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Opening the FPGA Box&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Python Scapy &lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li dir=&quot;ltr&quot; style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; list-style-type: disc; text-decoration: none; vertical-align: baseline;&quot;&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;HDMI2Ethernet Pipeline&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b id=&quot;docs-internal-guid-9f0da85b-3c3c-6103-a659-7ba7a659a88a&quot; style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;I am aiming to try &lt;/span&gt;&lt;a href=&quot;http://www.fpgarelated.com/showarticle/25.php&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;MyHDL FPGA Tutorial I (LED Strobe)&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; on my &lt;/span&gt;&lt;a href=&quot;http://bit.ly/1dI4a9D&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Xilinx Atlys Board&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;I found that it has 100 MHz input clock from &lt;/span&gt;&lt;a href=&quot;http://www.digilentinc.com/Data/Products/ATLYS/Atlys_rm_V2.pdf&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Xilinx Atlys Board Reference Manual&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The above MyHDL tutorial is little bit hard to follow.So i ended up creating my own version. Once i got the led strobe working in Python. The next step was to convert it to Verilog and then go through the entire Xilinx Build Flow till bit file generation. I got the Verilog conversion correctly. Unfortunately, the provided compile_stroby.py does not work to generate bit file from Verilog. I will report it to the author of the tutorial.So, I took the other route. I manually created Xilinx ISE project for Atlys Spartan 6 board (XC6SLX45), imported Verilog file, manually created constraint file (my_stroby.ucf) and clicked the Implementation flow. As a result, i got the bit file generated. I was able to program the board successfully using Xilinx Impact. Unfortunately, the leds are not blinking, despite spending almost 2 hours (its 1:44 AM now :( &amp;nbsp;)&lt;/span&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 15px; line-height: 17.25px; white-space: pre-wrap;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1.15; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;line-height: 1.15;&quot;&gt;I will debug it in the morning.&lt;/span&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;b style=&quot;font-weight: normal;&quot;&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;The files can be found on my &lt;/span&gt;&lt;a href=&quot;http://bit.ly/1ptt2DB&quot; style=&quot;text-decoration: none;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: #1155cc; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: underline; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;bitbucket&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div dir=&quot;ltr&quot; style=&quot;line-height: 1.15; margin-bottom: 0pt; margin-top: 0pt; text-align: justify;&quot;&gt;&lt;span style=&quot;background-color: transparent; color: black; font-family: Arial; font-size: 15px; font-style: normal; font-variant: normal; font-weight: normal; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Today was the last holiday from long weekend but i thought to do something to keep going.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/27/opening-the-xilinx-atlys-board/</guid>
      <dc:date>2014-05-27T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>FIFO Downstream Interfacing using MyHDL</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/24/fifo-downstream-interfacing-using-myhdl/</link>
      <description>Today the objective was to define the FIFO downstream interface as defined in the &lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;HDMI2Ethernet&lt;/a&gt; Specification document that will interface with the RTP block. I also cleaned up the source code tree on &lt;a href=&quot;http://bit.ly/1lJvO3Y&quot;&gt;Bitbucket&lt;/a&gt;. It should look more cleaner with README.txt and conversion directory that holds the Verilog and VHDL modules. Figure 1 shows the Simulation waveform&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-1I_gmx9zPBw/U4AGFWtIC-I/AAAAAAAAAF4/EdIG9lu8Kbw/s1600/fifo_downstream_interface_vcd_waveform.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-1I_gmx9zPBw/U4AGFWtIC-I/AAAAAAAAAF4/EdIG9lu8Kbw/s1600/fifo_downstream_interface_vcd_waveform.jpg&quot; height=&quot;251&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 1: FIFO downstream interface capture waveform&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The objective of yesterday's and today's exercise is to create simulation models (flexible models that can leverage full features of Python as these blocks don't need to be converted to Hardware (Verilog or VHDL) ) as many as necessary in HDMI2Ethernet Pipeline shown in Blue in Figure 2. The yellow Block such as Packetizer needs to be converted to Hardware and thus needs a strict HDL (Verilog or VHDL) modeling. This will become clear in the forthcoming weeks.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-_t7nuwjm9uA/U4AECZ09MVI/AAAAAAAAAFs/_F5luk_KNkM/s1600/simulation_models.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-_t7nuwjm9uA/U4AECZ09MVI/AAAAAAAAAFs/_F5luk_KNkM/s1600/simulation_models.jpg&quot; height=&quot;99&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: center;&quot;&gt;Figure 2: Design and Verification environment&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Looking forward to Memorial day long weekend !!!&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/24/fifo-downstream-interfacing-using-myhdl/</guid>
      <dc:date>2014-05-24T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Defining FIFO Upstream Interface using MyHDL Python library for Hardware Design</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/23/defining-fifo-upstream-interface-using-myhdl-pyth/</link>
      <description>Today was learning&amp;nbsp;&lt;a href=&quot;http://www.myhdl.org/&quot;&gt;MyHDL&lt;/a&gt;&amp;nbsp;and putting into practice. My mentor created an &lt;a href=&quot;http://bit.ly/1vV1Lyr&quot;&gt;exercise&lt;/a&gt; based on&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jc1wFk&quot;&gt;HDMI2Ethernet Specfication&lt;/a&gt;. Note that this specification is still in progress.The exercise objective is to mimic HDMI2USB' FIFO upstream interface. Once this interface is correctly implemented in hardware and and tested by testbench&amp;nbsp;+ waveform viewer, we can proceed downstream towards Blocks that need to be implemented for this project like RTP packet processing, UDP packet processing, IP packet processing, and Ethernet packet processing. All the Files are available to download from my&amp;nbsp;&lt;a href=&quot;http://bit.ly/1jMVdhq&quot;&gt;bitbucket.&lt;/a&gt;&lt;br /&gt;Here is the GTK waveform.&lt;br /&gt;&lt;span style=&quot;color: #0000ee;&quot;&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/span&gt;&lt;a href=&quot;http://bit.ly/1trvqx3&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-Zp3S0Ht9C9Q/U37Kcsb8PMI/AAAAAAAAAFc/OBceiKjeSik/s1600/waveform_FIFO_Write.jpg&quot; imageanchor=&quot;1&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-Zp3S0Ht9C9Q/U37Kcsb8PMI/AAAAAAAAAFc/OBceiKjeSik/s1600/waveform_FIFO_Write.jpg&quot; height=&quot;365&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/23/defining-fifo-upstream-interface-using-myhdl-pyth/</guid>
      <dc:date>2014-05-23T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>RTP packet crafting using dpkt-1.80 Python library</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/22/rtp-packet-crafting-using-dpkt-1-80-python-librar/</link>
      <description>&lt;span style=&quot;font-size: large;&quot;&gt;Installing &lt;a href=&quot;http://code.google.com/p/dpkt/downloads/list&quot;&gt;dpkt-1.80.tar.gz&lt;/a&gt; was trickier than i thought. Python is not easy to master. I always learn something new when i start to work on it. The problem with dpkt is the poor documentation right from the start. Installation was quite an issue for me but later in the afternoon, i figured out the correct way to do it. Before that i was trying to import modules from the dpkt directory but something in the code would keep on breaking. Dpkt project suffers from poor documentation of the source code as well and lack of examples to use the library.I had to try out a couple of things before i was able to create the RTP packets. Part of this effort was googling looking for code samples using dpkt. Unfortunately, there were not many.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Anyway, here is the RTP code that i have coded&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;#trying to send rtp packet&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;#by Tariq B. Ahmad&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;# 5/21/2014&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;import dpkt&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;import socket&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;rtp_pkt = dpkt.rtp.RTP()&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;rtp_pkt.data = '''HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; HelloWorldHelloWorldHelloWorldHelloWorld&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; '''&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;udp_pkt = dpkt.udp.UDP(sport=11111,dport=11112)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;udp_pkt.data = rtp_pkt.data&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;udp_pkt.ulen += len(udp_pkt.data)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;ip_pkt = dpkt.ip.IP(id=0, src='\x01\x02\x03\x04', dst='\xc0\xa8\x7a\x01', p=17) # p=17 for udp&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;ip_pkt.data = udp_pkt.data&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;ip_pkt.len += len(ip_pkt.data)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: blue;&quot;&gt;s = socket.socket(socket.AF_INET, socket.SOCK_RAW, dpkt.ip.IP_PROTO_UDP)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;s.connect(('192.168.122.1', 11112))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;#print str(ip_pkt)&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;sent = s.send(str(ip_pkt))&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;  &lt;span style=&quot;color: blue;&quot;&gt;print 'sent %d bytes' % sent&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: blue;&quot;&gt;&lt;br /&gt;&lt;/span&gt;Here is the output when you run the script. You have to be the root user in Linux to use socket functionality.&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: orange;&quot;&gt;sent 1554 bytes&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;I tried to capture this using Wireshark by listening to the interface on 192.168.122.1 but Wireshark could not capture this. I have googled this and other people have reported the same issue.&lt;br /&gt;&lt;br /&gt;If i have some time tomorrow, i shall use Scapy library to see if i can do the same or better with Scapy.&lt;br /&gt;Cheerz and tomorrow is MyHDL day&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;I also received my Xilinx Atlys board today !!!&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/22/rtp-packet-crafting-using-dpkt-1-80-python-librar/</guid>
      <dc:date>2014-05-22T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>Tools for RTP packet creation</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/20/tools-for-rtp-packet-creation/</link>
      <description>The purpose of yesterday's and today's work was to find out tools which could create customized RTP packets. Unfortunately after trying almost dozen tools, no such tool exist. If you know any, please let me know by adding your comments. The original exercise that was in my mind was to create custom RTP packets (Where i can define payload type, sequence number etc), save them in a file and later play them back. This would later become testbench for RTP module that is going to be implemented in Verilog.&lt;br /&gt;&lt;br /&gt;From the point of view of writing my own RTP traffic generation tool using available libraries, things are little difficult as the RTP &lt;b&gt;payload format&lt;/b&gt; is different for every payload type. This makes no sense to me but this is how it is. For example RTP &lt;b&gt;payload format&lt;/b&gt; for Vorbis (audio file) &lt;a href=&quot;http://tools.ietf.org/rfc/rfc5215.txt&quot;&gt;http://tools.ietf.org/rfc/rfc5215.txt&lt;/a&gt; is different than from MPEG (video file) &lt;a href=&quot;http://tools.ietf.org/html/rfc2250&quot;&gt;http://tools.ietf.org/html/rfc2250&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Fortunately, there is RTP payload for uncompressed video,&lt;a href=&quot;http://tools.ietf.org/html/rfc4175&quot;&gt;http://tools.ietf.org/html/rfc4175&lt;/a&gt;. I am going to write a small program in Python or C that will generate RTP packets with uncompressed video payload and save as file on a disk.&lt;br /&gt;&lt;br /&gt;The tools i tried on the 2nd day are&lt;br /&gt;&lt;br /&gt;1)&amp;nbsp;&lt;a href=&quot;http://www.candelatech.com/downloads.php&quot;&gt;LANForge&lt;/a&gt;&lt;br /&gt;2)&amp;nbsp;&lt;a href=&quot;http://traffic.comics.unina.it/software/ITG/download.php&quot;&gt;D-ITG Traffic Generator&lt;/a&gt;&lt;br /&gt;3) &lt;a href=&quot;http://www.perihel.at/sec/mz/&quot;&gt;Mausezahn&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Time to look at HDMI2USB hardware ...&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/20/tools-for-rtp-packet-creation/</guid>
      <dc:date>2014-05-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>First Day of GSoC 2014</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/20/first-day-of-gsoc-2014/</link>
      <description>First day of GSoC 2014 was full of learning this and that. I am trying to create custom RTP packets and then play them back. Apparently all tools that i have tried today are either too old or broken. Dependencies in Linux are a big mess. Porting outdated source code to recent version of GCC was quite a challenge. Continuing to do the work. I tried the following tools on the first day&lt;br /&gt;&lt;br /&gt;1)&amp;nbsp;&lt;a href=&quot;http://www.cs.columbia.edu/irt/software/rtptools/&quot;&gt;RTP Tools 1.20&lt;/a&gt;&lt;br /&gt;2)&amp;nbsp;&lt;a href=&quot;http://www.fefe.de/rtp/&quot;&gt;FeFe RTP&lt;/a&gt;&lt;br /&gt;3)&amp;nbsp;&lt;a href=&quot;http://www.ece.cmu.edu/~ece796/project99/6/final/&quot;&gt;CMU RTP&lt;/a&gt;&amp;nbsp; (from 1999)&lt;br /&gt;4)&amp;nbsp;&lt;a href=&quot;http://packeth.sourceforge.net/packeth/Home.html&quot;&gt;Packeth&lt;/a&gt;&lt;br /&gt;5)&amp;nbsp;&lt;a href=&quot;https://prj.tzi.org/cgi-bin/trac.cgi/browser/rtpsend/trunk/README&quot;&gt;RTPSend and RTPSPY from Dirk&lt;/a&gt;&amp;nbsp;(2003-2006)&lt;br /&gt;6)&amp;nbsp;&lt;a href=&quot;https://code.google.com/p/dpkt/source/browse/trunk/dpkt/rtp.py&quot;&gt;DPKT&lt;/a&gt;&amp;nbsp;(needs further investigation)&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/20/first-day-of-gsoc-2014/</guid>
      <dc:date>2014-05-20T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>GSOC 2014</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/05/gsoc-2014/</link>
      <description>This is final week in the semester. Things are pretty hectic. I am working on improving introduction email text that i need to send to the TimVideos community to tell them about my project (HDMI2Ethernet). Your comments on these posts will be highly valued and appreciated. Help keep the blog active.&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/05/05/gsoc-2014/</guid>
      <dc:date>2014-05-05T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>GSOC 2014</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/29/gsoc-2014/</link>
      <description>This is the first line of the blog. This is created for test purpose. Created on 4/29/2014 at 6:31 PM EST&lt;div class=&quot;author&quot;&gt;
  &lt;span&gt;
    &lt;i&gt;Originally posted on &lt;a href=&quot;http://hdmi2ethernet.blogspot.com/&quot;&gt;GSOC 2014&lt;/a&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;


</description>
      <pubDate>Tue, 29 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/29/gsoc-2014/</guid>
      <dc:date>2014-04-29T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 forked timvideos/HDMI2USB to tariq786/HDMI2USB</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/28/tariq786-forked-timvideos-hdmi2usb-to-tariq786-hd/</link>
      <description>&lt;!-- fork --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/28/tariq786-forked-timvideos-hdmi2usb-to-tariq786-hd/</guid>
      <dc:date>2014-04-28T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 pushed to student-harira at tariq786/family-recipes-1</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-pushed-to-student-harira-at-tariq786-fam/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-pushed-to-student-harira-at-tariq786-fam/</guid>
      <dc:date>2014-04-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 pushed to master at tariq786/family-recipes-1</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-pushed-to-master-at-tariq786-family-reci/</link>
      <description>&lt;!-- push --&gt;
&lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-pushed-to-master-at-tariq786-family-reci/</guid>
      <dc:date>2014-04-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 opened pull request octovinh/family-recipes#1</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-opened-pull-request-octovinh-family-reci/</link>
      <description>&lt;!-- pull_request --&gt;
&lt;span class=&quot;mega-octicon octicon-git-pull-request&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-opened-pull-request-octovinh-family-reci/</guid>
      <dc:date>2014-04-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 forked octovinh/family-recipes to tariq786/family-recipes-1</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-forked-octovinh-family-recipes-to-tariq7/</link>
      <description>&lt;!-- fork --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-forked-octovinh-family-recipes-to-tariq7/</guid>
      <dc:date>2014-04-21T00:00:00+00:00</dc:date>
    </item>
    <item>
      <title>tariq786 created branch student-harira at tariq786/family-recipes-1</title>
      <link>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-created-branch-student-harira-at-tariq78/</link>
      <description>&lt;!-- create --&gt;
&lt;div class=&quot;simple&quot;&gt;
  &lt;span class=&quot;octicon octicon-git-branch&quot;&gt;&lt;/span&gt;

</description>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0000</pubDate>
      <guid>http://planet.timvideos.us/gsoc-2014-hdmi2usb/2014/04/21/tariq786-created-branch-student-harira-at-tariq78/</guid>
      <dc:date>2014-04-21T00:00:00+00:00</dc:date>
    </item>
    <dc:date>2014-06-12T00:00:00+00:00</dc:date>
  </channel>
</rss>